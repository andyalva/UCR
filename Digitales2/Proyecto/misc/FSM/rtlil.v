/* Generated by Yosys 0.5+ (git sha1 f13e387, gcc 5.3.1-8ubuntu2 -O2 -fstack-protector-strong -fPIC -Os) */

(* top =  1  *)
(* src = "FSM.v:2" *)
module FSM(clk, reset, init, almost_full, almost_empty, empty_Fifo, no_empty_Fifo, Fifo_overflow, error_full, pausa, continua, data_Fifo);
  (* src = "FSM.v:19" *)
  wire [3:0] _00_;
  (* src = "FSM.v:19" *)
  wire [3:0] _01_;
  (* src = "FSM.v:19" *)
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire [3:0] _04_;
  wire [3:0] _05_;
  (* src = "FSM.v:2" *)
  input Fifo_overflow;
  (* src = "FSM.v:2" *)
  input almost_empty;
  (* src = "FSM.v:2" *)
  input almost_full;
  (* src = "FSM.v:2" *)
  input clk;
  (* src = "FSM.v:3" *)
  output [3:0] continua;
  reg [3:0] continua;
  (* src = "FSM.v:4" *)
  input [7:0] data_Fifo;
  (* src = "FSM.v:2" *)
  input empty_Fifo;
  (* src = "FSM.v:3" *)
  output [3:0] error_full;
  reg [3:0] error_full;
  (* src = "FSM.v:2" *)
  input init;
  (* src = "FSM.v:2" *)
  input no_empty_Fifo;
  (* src = "FSM.v:3" *)
  output [3:0] pausa;
  reg [3:0] pausa;
  (* src = "FSM.v:2" *)
  input reset;
  assign _03_[0] = init ? 1'b0 : error_full[0];
  assign _03_[1] = init ? 1'b0 : error_full[1];
  assign _03_[2] = init ? 1'b0 : error_full[2];
  assign _03_[3] = init ? 1'b0 : error_full[3];
  assign _01_[0] = reset ? error_full[0] : _03_[0];
  assign _01_[1] = reset ? error_full[1] : _03_[1];
  assign _01_[2] = reset ? error_full[2] : _03_[2];
  assign _01_[3] = reset ? error_full[3] : _03_[3];
  assign _04_[0] = init ? 1'b0 : pausa[0];
  assign _04_[1] = init ? 1'b0 : pausa[1];
  assign _04_[2] = init ? 1'b0 : pausa[2];
  assign _04_[3] = init ? 1'b0 : pausa[3];
  assign _02_[0] = reset ? pausa[0] : _04_[0];
  assign _02_[1] = reset ? pausa[1] : _04_[1];
  assign _02_[2] = reset ? pausa[2] : _04_[2];
  assign _02_[3] = reset ? pausa[3] : _04_[3];
  assign _05_[0] = init ? 1'b0 : continua[0];
  assign _05_[1] = init ? 1'b0 : continua[1];
  assign _05_[2] = init ? 1'b0 : continua[2];
  assign _05_[3] = init ? 1'b0 : continua[3];
  assign _00_[0] = reset ? continua[0] : _05_[0];
  assign _00_[1] = reset ? continua[1] : _05_[1];
  assign _00_[2] = reset ? continua[2] : _05_[2];
  assign _00_[3] = reset ? continua[3] : _05_[3];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      error_full[0] <= _01_[0];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      error_full[1] <= _01_[1];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      error_full[2] <= _01_[2];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      error_full[3] <= _01_[3];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      pausa[0] <= _02_[0];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      pausa[1] <= _02_[1];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      pausa[2] <= _02_[2];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      pausa[3] <= _02_[3];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      continua[0] <= _00_[0];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      continua[1] <= _00_[1];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      continua[2] <= _00_[2];
  (* src = "FSM.v:19" *)
  always @(posedge clk)
      continua[3] <= _00_[3];
endmodule
