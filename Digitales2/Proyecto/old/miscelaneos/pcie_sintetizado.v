/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 4.8.4-2ubuntu1~14.04.3 -O2 -fstack-protector -fPIC -Os) */

(* src = "clk_1Mhz/clk_1Mhz.v:1" *)
module CLK_1Mhz_cond(CLK, RESET, CLK_1Mhz);
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  wire _00_;
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  wire [1:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  (* src = "clk_1Mhz/clk_1Mhz.v:4" *)
  input CLK;
  (* src = "clk_1Mhz/clk_1Mhz.v:7" *)
  output CLK_1Mhz;
  (* src = "clk_1Mhz/clk_1Mhz.v:5" *)
  input RESET;
  (* src = "clk_1Mhz/clk_1Mhz.v:10" *)
  wire [1:0] counter;
  NOR _06_ (
    .A(counter[1]),
    .B(RESET),
    .Y(_04_)
  );
  NAND _07_ (
    .A(_04_),
    .B(counter[0]),
    .Y(_05_)
  );
  NOR _08_ (
    .A(counter[0]),
    .B(RESET),
    .Y(_01_[0])
  );
  NAND _09_ (
    .A(_01_[0]),
    .B(CLK_1Mhz),
    .Y(_02_)
  );
  NAND _10_ (
    .A(_02_),
    .B(_05_),
    .Y(_00_)
  );
  NAND _11_ (
    .A(_01_[0]),
    .B(counter[1]),
    .Y(_03_)
  );
  NAND _12_ (
    .A(_03_),
    .B(_05_),
    .Y(_01_[1])
  );
  DFF _13_ (
    .C(CLK),
    .D(_01_[0]),
    .Q(counter[0])
  );
  DFF _14_ (
    .C(CLK),
    .D(_01_[1]),
    .Q(counter[1])
  );
  DFF _15_ (
    .C(CLK),
    .D(_00_),
    .Q(CLK_1Mhz)
  );
endmodule

(* src = "clk_250hz/clk_250hz.v:1" *)
module CLK_250hz_cond(CLK, RESET, CLK_250hz);
  (* src = "clk_250hz/clk_250hz.v:12" *)
  wire _00_;
  (* src = "clk_250hz/clk_250hz.v:12" *)
  wire [4:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  (* src = "clk_250hz/clk_250hz.v:4" *)
  input CLK;
  (* src = "clk_250hz/clk_250hz.v:7" *)
  output CLK_250hz;
  (* src = "clk_250hz/clk_250hz.v:5" *)
  input RESET;
  (* src = "clk_250hz/clk_250hz.v:10" *)
  wire [4:0] counter;
  NOT _24_ (
    .A(RESET),
    .Y(_02_)
  );
  NOT _25_ (
    .A(counter[4]),
    .Y(_03_)
  );
  NOT _26_ (
    .A(counter[3]),
    .Y(_04_)
  );
  NOT _27_ (
    .A(counter[0]),
    .Y(_05_)
  );
  NOT _28_ (
    .A(counter[1]),
    .Y(_06_)
  );
  NOR _29_ (
    .A(_06_),
    .B(_05_),
    .Y(_07_)
  );
  NAND _30_ (
    .A(_07_),
    .B(counter[2]),
    .Y(_08_)
  );
  NOR _31_ (
    .A(_08_),
    .B(_04_),
    .Y(_09_)
  );
  NAND _32_ (
    .A(_09_),
    .B(_03_),
    .Y(_10_)
  );
  NAND _33_ (
    .A(_10_),
    .B(_02_),
    .Y(_11_)
  );
  NOR _34_ (
    .A(_11_),
    .B(counter[0]),
    .Y(_01_[0])
  );
  NAND _35_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_12_)
  );
  NAND _36_ (
    .A(_06_),
    .B(_05_),
    .Y(_13_)
  );
  NAND _37_ (
    .A(_13_),
    .B(_12_),
    .Y(_14_)
  );
  NOR _38_ (
    .A(_14_),
    .B(_11_),
    .Y(_01_[1])
  );
  NOT _39_ (
    .A(counter[2]),
    .Y(_15_)
  );
  NOR _40_ (
    .A(_12_),
    .B(_15_),
    .Y(_16_)
  );
  NAND _41_ (
    .A(_12_),
    .B(_15_),
    .Y(_17_)
  );
  NAND _42_ (
    .A(_17_),
    .B(_02_),
    .Y(_18_)
  );
  NOR _43_ (
    .A(_18_),
    .B(_16_),
    .Y(_01_[2])
  );
  NOR _44_ (
    .A(_16_),
    .B(counter[3]),
    .Y(_19_)
  );
  NAND _45_ (
    .A(_16_),
    .B(counter[3]),
    .Y(_20_)
  );
  NAND _46_ (
    .A(_20_),
    .B(_02_),
    .Y(_21_)
  );
  NOR _47_ (
    .A(_21_),
    .B(_19_),
    .Y(_01_[3])
  );
  NOR _48_ (
    .A(_21_),
    .B(_03_),
    .Y(_01_[4])
  );
  NOR _49_ (
    .A(_08_),
    .B(counter[4]),
    .Y(_22_)
  );
  NOR _50_ (
    .A(_22_),
    .B(CLK_250hz),
    .Y(_23_)
  );
  NOR _51_ (
    .A(_23_),
    .B(_11_),
    .Y(_00_)
  );
  DFF _52_ (
    .C(CLK),
    .D(_00_),
    .Q(CLK_250hz)
  );
  DFF _53_ (
    .C(CLK),
    .D(_01_[0]),
    .Q(counter[0])
  );
  DFF _54_ (
    .C(CLK),
    .D(_01_[1]),
    .Q(counter[1])
  );
  DFF _55_ (
    .C(CLK),
    .D(_01_[2]),
    .Q(counter[2])
  );
  DFF _56_ (
    .C(CLK),
    .D(_01_[3]),
    .Q(counter[3])
  );
  DFF _57_ (
    .C(CLK),
    .D(_01_[4]),
    .Q(counter[4])
  );
endmodule

(* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
module bytestripingRX(clk, reset, valid, data, data_in0, data_in1, data_in2, data_in3);
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
  input clk;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:3" *)
  output [7:0] data;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in0;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in1;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in2;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in3;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
  input reset;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
  input valid;
  assign data = 8'b00000000;
endmodule

(* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
module bytestripingTX(clk, reset, valid, data, data_out0, data_out1, data_out2, data_out3);
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
  input clk;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:3" *)
  input [7:0] data;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out0;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out1;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out2;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out3;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
  input reset;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
  input valid;
  assign data_out0 = 8'b00000000;
  assign data_out1 = 8'b00000000;
  assign data_out2 = 8'b00000000;
  assign data_out3 = 8'b00000000;
endmodule

(* src = "demux/demux.v:3" *)
module demux(Rx_buffer, CLK, VALID, VALID_OUT, DATA);
  (* src = "demux/demux.v:9" *)
  wire [7:0] _000_;
  (* src = "demux/demux.v:9" *)
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  (* src = "demux/demux.v:4" *)
  input CLK;
  (* src = "demux/demux.v:7" *)
  output [7:0] DATA;
  (* src = "demux/demux.v:3" *)
  input [7:0] Rx_buffer;
  (* src = "demux/demux.v:5" *)
  input VALID;
  (* src = "demux/demux.v:6" *)
  output VALID_OUT;
  NOT _048_ (
    .A(VALID),
    .Y(_002_)
  );
  NOT _049_ (
    .A(Rx_buffer[2]),
    .Y(_003_)
  );
  NOT _050_ (
    .A(Rx_buffer[3]),
    .Y(_004_)
  );
  NAND _051_ (
    .A(_004_),
    .B(_003_),
    .Y(_005_)
  );
  NOT _052_ (
    .A(Rx_buffer[7]),
    .Y(_006_)
  );
  NOR _053_ (
    .A(_006_),
    .B(Rx_buffer[0]),
    .Y(_007_)
  );
  NAND _054_ (
    .A(Rx_buffer[6]),
    .B(Rx_buffer[4]),
    .Y(_008_)
  );
  NOR _055_ (
    .A(_008_),
    .B(_007_),
    .Y(_009_)
  );
  NAND _056_ (
    .A(_009_),
    .B(_005_),
    .Y(_010_)
  );
  NAND _057_ (
    .A(Rx_buffer[3]),
    .B(Rx_buffer[2]),
    .Y(_011_)
  );
  NAND _058_ (
    .A(Rx_buffer[0]),
    .B(Rx_buffer[1]),
    .Y(_012_)
  );
  NAND _059_ (
    .A(_012_),
    .B(_011_),
    .Y(_013_)
  );
  NOT _060_ (
    .A(Rx_buffer[0]),
    .Y(_014_)
  );
  NOT _061_ (
    .A(Rx_buffer[5]),
    .Y(_015_)
  );
  NOR _062_ (
    .A(_006_),
    .B(_015_),
    .Y(_016_)
  );
  NOR _063_ (
    .A(_016_),
    .B(_014_),
    .Y(_017_)
  );
  NOT _064_ (
    .A(Rx_buffer[1]),
    .Y(_018_)
  );
  NOR _065_ (
    .A(_011_),
    .B(_018_),
    .Y(_019_)
  );
  NOR _066_ (
    .A(_019_),
    .B(_017_),
    .Y(_020_)
  );
  NAND _067_ (
    .A(_020_),
    .B(_013_),
    .Y(_021_)
  );
  NOR _068_ (
    .A(_021_),
    .B(_010_),
    .Y(_022_)
  );
  NOR _069_ (
    .A(_022_),
    .B(_002_),
    .Y(_023_)
  );
  NAND _070_ (
    .A(_023_),
    .B(Rx_buffer[0]),
    .Y(_024_)
  );
  NOT _071_ (
    .A(_017_),
    .Y(_025_)
  );
  NOR _072_ (
    .A(_004_),
    .B(_003_),
    .Y(_026_)
  );
  NAND _073_ (
    .A(_026_),
    .B(Rx_buffer[1]),
    .Y(_027_)
  );
  NAND _074_ (
    .A(_027_),
    .B(_013_),
    .Y(_028_)
  );
  NOR _075_ (
    .A(_028_),
    .B(_010_),
    .Y(_029_)
  );
  NAND _076_ (
    .A(_029_),
    .B(_025_),
    .Y(_030_)
  );
  NAND _077_ (
    .A(_030_),
    .B(VALID),
    .Y(_031_)
  );
  NAND _078_ (
    .A(_031_),
    .B(DATA[0]),
    .Y(_032_)
  );
  NAND _079_ (
    .A(_032_),
    .B(_024_),
    .Y(_000_[0])
  );
  NAND _080_ (
    .A(_023_),
    .B(Rx_buffer[1]),
    .Y(_033_)
  );
  NAND _081_ (
    .A(_031_),
    .B(DATA[1]),
    .Y(_034_)
  );
  NAND _082_ (
    .A(_034_),
    .B(_033_),
    .Y(_000_[1])
  );
  NAND _083_ (
    .A(_023_),
    .B(Rx_buffer[2]),
    .Y(_035_)
  );
  NAND _084_ (
    .A(_031_),
    .B(DATA[2]),
    .Y(_036_)
  );
  NAND _085_ (
    .A(_036_),
    .B(_035_),
    .Y(_000_[2])
  );
  NAND _086_ (
    .A(_023_),
    .B(Rx_buffer[3]),
    .Y(_037_)
  );
  NAND _087_ (
    .A(_031_),
    .B(DATA[3]),
    .Y(_038_)
  );
  NAND _088_ (
    .A(_038_),
    .B(_037_),
    .Y(_000_[3])
  );
  NAND _089_ (
    .A(_023_),
    .B(Rx_buffer[4]),
    .Y(_039_)
  );
  NAND _090_ (
    .A(_031_),
    .B(DATA[4]),
    .Y(_040_)
  );
  NAND _091_ (
    .A(_040_),
    .B(_039_),
    .Y(_000_[4])
  );
  NAND _092_ (
    .A(_023_),
    .B(Rx_buffer[5]),
    .Y(_041_)
  );
  NAND _093_ (
    .A(_031_),
    .B(DATA[5]),
    .Y(_042_)
  );
  NAND _094_ (
    .A(_042_),
    .B(_041_),
    .Y(_000_[5])
  );
  NAND _095_ (
    .A(_023_),
    .B(Rx_buffer[6]),
    .Y(_043_)
  );
  NAND _096_ (
    .A(_031_),
    .B(DATA[6]),
    .Y(_044_)
  );
  NAND _097_ (
    .A(_044_),
    .B(_043_),
    .Y(_000_[6])
  );
  NAND _098_ (
    .A(_023_),
    .B(Rx_buffer[7]),
    .Y(_045_)
  );
  NAND _099_ (
    .A(_031_),
    .B(DATA[7]),
    .Y(_046_)
  );
  NAND _100_ (
    .A(_046_),
    .B(_045_),
    .Y(_000_[7])
  );
  NAND _101_ (
    .A(VALID_OUT),
    .B(_002_),
    .Y(_047_)
  );
  NAND _102_ (
    .A(_047_),
    .B(_031_),
    .Y(_001_)
  );
  DFF _103_ (
    .C(CLK),
    .D(_000_[0]),
    .Q(DATA[0])
  );
  DFF _104_ (
    .C(CLK),
    .D(_000_[1]),
    .Q(DATA[1])
  );
  DFF _105_ (
    .C(CLK),
    .D(_000_[2]),
    .Q(DATA[2])
  );
  DFF _106_ (
    .C(CLK),
    .D(_000_[3]),
    .Q(DATA[3])
  );
  DFF _107_ (
    .C(CLK),
    .D(_000_[4]),
    .Q(DATA[4])
  );
  DFF _108_ (
    .C(CLK),
    .D(_000_[5]),
    .Q(DATA[5])
  );
  DFF _109_ (
    .C(CLK),
    .D(_000_[6]),
    .Q(DATA[6])
  );
  DFF _110_ (
    .C(CLK),
    .D(_000_[7]),
    .Q(DATA[7])
  );
  DFF _111_ (
    .C(CLK),
    .D(_001_),
    .Q(VALID_OUT)
  );
endmodule

(* src = "mux_de_control_forzado/mux_de_control_forzado.v:3" *)
module mux_de_control_forzado(CONTROL, VALID, Tx_Buffer, CLK, OUT);
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  wire [7:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:6" *)
  input CLK;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:3" *)
  input [3:0] CONTROL;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:7" *)
  output [7:0] OUT;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:5" *)
  input [7:0] Tx_Buffer;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:4" *)
  output VALID;
  NOT _060_ (
    .A(CONTROL[3]),
    .Y(_001_)
  );
  NOT _061_ (
    .A(CONTROL[1]),
    .Y(_002_)
  );
  NAND _062_ (
    .A(_002_),
    .B(_001_),
    .Y(_003_)
  );
  NOR _063_ (
    .A(_003_),
    .B(CONTROL[2]),
    .Y(_004_)
  );
  NAND _064_ (
    .A(_004_),
    .B(CONTROL[0]),
    .Y(_005_)
  );
  NOT _065_ (
    .A(CONTROL[0]),
    .Y(_006_)
  );
  NOR _066_ (
    .A(CONTROL[2]),
    .B(CONTROL[3]),
    .Y(_007_)
  );
  NAND _067_ (
    .A(_007_),
    .B(CONTROL[0]),
    .Y(_008_)
  );
  NOR _068_ (
    .A(_008_),
    .B(_002_),
    .Y(_009_)
  );
  NOT _069_ (
    .A(CONTROL[2]),
    .Y(_010_)
  );
  NOR _070_ (
    .A(_003_),
    .B(_010_),
    .Y(_011_)
  );
  NOR _071_ (
    .A(_011_),
    .B(_009_),
    .Y(_012_)
  );
  NOR _072_ (
    .A(_012_),
    .B(_006_),
    .Y(_013_)
  );
  NOT _073_ (
    .A(Tx_Buffer[0]),
    .Y(_014_)
  );
  NAND _074_ (
    .A(_002_),
    .B(CONTROL[3]),
    .Y(_015_)
  );
  NOR _075_ (
    .A(_015_),
    .B(CONTROL[2]),
    .Y(_016_)
  );
  NAND _076_ (
    .A(_016_),
    .B(CONTROL[0]),
    .Y(_017_)
  );
  NOR _077_ (
    .A(_017_),
    .B(_014_),
    .Y(_018_)
  );
  NOR _078_ (
    .A(_018_),
    .B(_013_),
    .Y(_019_)
  );
  NAND _079_ (
    .A(_019_),
    .B(_005_),
    .Y(_000_[0])
  );
  NOR _080_ (
    .A(CONTROL[1]),
    .B(_001_),
    .Y(_020_)
  );
  NAND _081_ (
    .A(_020_),
    .B(_010_),
    .Y(_021_)
  );
  NOR _082_ (
    .A(_021_),
    .B(_006_),
    .Y(_022_)
  );
  NAND _083_ (
    .A(_022_),
    .B(Tx_Buffer[1]),
    .Y(_023_)
  );
  NAND _084_ (
    .A(CONTROL[2]),
    .B(CONTROL[1]),
    .Y(_024_)
  );
  NOR _085_ (
    .A(_024_),
    .B(CONTROL[3]),
    .Y(_025_)
  );
  NAND _086_ (
    .A(_025_),
    .B(_006_),
    .Y(_026_)
  );
  NAND _087_ (
    .A(_026_),
    .B(_008_),
    .Y(_027_)
  );
  NOT _088_ (
    .A(_027_),
    .Y(_028_)
  );
  NAND _089_ (
    .A(_028_),
    .B(_023_),
    .Y(_000_[1])
  );
  NAND _090_ (
    .A(_010_),
    .B(_001_),
    .Y(_029_)
  );
  NOR _091_ (
    .A(_029_),
    .B(CONTROL[0]),
    .Y(_030_)
  );
  NOT _092_ (
    .A(_025_),
    .Y(_031_)
  );
  NAND _093_ (
    .A(_016_),
    .B(_006_),
    .Y(_032_)
  );
  NAND _094_ (
    .A(_032_),
    .B(_031_),
    .Y(_033_)
  );
  NOR _095_ (
    .A(_033_),
    .B(_030_),
    .Y(_034_)
  );
  NOR _096_ (
    .A(CONTROL[1]),
    .B(CONTROL[3]),
    .Y(_035_)
  );
  NOT _097_ (
    .A(Tx_Buffer[2]),
    .Y(_036_)
  );
  NOR _098_ (
    .A(_017_),
    .B(_036_),
    .Y(_037_)
  );
  NOR _099_ (
    .A(_037_),
    .B(_035_),
    .Y(_038_)
  );
  NAND _100_ (
    .A(_038_),
    .B(_034_),
    .Y(_000_[2])
  );
  NOR _101_ (
    .A(_029_),
    .B(_006_),
    .Y(_039_)
  );
  NAND _102_ (
    .A(_039_),
    .B(CONTROL[1]),
    .Y(_040_)
  );
  NAND _103_ (
    .A(_035_),
    .B(CONTROL[2]),
    .Y(_041_)
  );
  NAND _104_ (
    .A(_041_),
    .B(_040_),
    .Y(_042_)
  );
  NOT _105_ (
    .A(Tx_Buffer[3]),
    .Y(_043_)
  );
  NOR _106_ (
    .A(_017_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _107_ (
    .A(_044_),
    .B(_042_),
    .Y(_045_)
  );
  NAND _108_ (
    .A(_045_),
    .B(_034_),
    .Y(_000_[3])
  );
  NOT _109_ (
    .A(Tx_Buffer[4]),
    .Y(_046_)
  );
  NAND _110_ (
    .A(_046_),
    .B(CONTROL[0]),
    .Y(_047_)
  );
  NAND _111_ (
    .A(_047_),
    .B(_016_),
    .Y(_048_)
  );
  NAND _112_ (
    .A(_048_),
    .B(CONTROL[3]),
    .Y(_000_[4])
  );
  NOT _113_ (
    .A(Tx_Buffer[5]),
    .Y(_049_)
  );
  NOR _114_ (
    .A(_017_),
    .B(_049_),
    .Y(_050_)
  );
  NOR _115_ (
    .A(_050_),
    .B(_033_),
    .Y(_051_)
  );
  NOR _116_ (
    .A(_013_),
    .B(_004_),
    .Y(_052_)
  );
  NAND _117_ (
    .A(_052_),
    .B(_051_),
    .Y(_000_[5])
  );
  NAND _118_ (
    .A(_022_),
    .B(Tx_Buffer[6]),
    .Y(_053_)
  );
  NAND _119_ (
    .A(_032_),
    .B(_041_),
    .Y(_054_)
  );
  NOR _120_ (
    .A(_054_),
    .B(_027_),
    .Y(_055_)
  );
  NAND _121_ (
    .A(_055_),
    .B(_053_),
    .Y(_000_[6])
  );
  NOT _122_ (
    .A(_026_),
    .Y(_056_)
  );
  NOT _123_ (
    .A(Tx_Buffer[7]),
    .Y(_057_)
  );
  NOR _124_ (
    .A(_017_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _125_ (
    .A(_058_),
    .B(_056_),
    .Y(_059_)
  );
  NAND _126_ (
    .A(_059_),
    .B(_052_),
    .Y(_000_[7])
  );
  DFF _127_ (
    .C(CLK),
    .D(_000_[0]),
    .Q(OUT[0])
  );
  DFF _128_ (
    .C(CLK),
    .D(_000_[1]),
    .Q(OUT[1])
  );
  DFF _129_ (
    .C(CLK),
    .D(_000_[2]),
    .Q(OUT[2])
  );
  DFF _130_ (
    .C(CLK),
    .D(_000_[3]),
    .Q(OUT[3])
  );
  DFF _131_ (
    .C(CLK),
    .D(_000_[4]),
    .Q(OUT[4])
  );
  DFF _132_ (
    .C(CLK),
    .D(_000_[5]),
    .Q(OUT[5])
  );
  DFF _133_ (
    .C(CLK),
    .D(_000_[6]),
    .Q(OUT[6])
  );
  DFF _134_ (
    .C(CLK),
    .D(_000_[7]),
    .Q(OUT[7])
  );
  assign VALID = 1'b1;
endmodule

(* src = "parallel_to_serial/parallel_serial.v:2" *)
module parallel_serial_cond(DATA_IN, CLK, RESET, Valid, DATA_OUT);
  (* src = "parallel_to_serial/parallel_serial.v:24" *)
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "parallel_to_serial/parallel_serial.v:6" *)
  input CLK;
  (* src = "parallel_to_serial/parallel_serial.v:5" *)
  input [7:0] DATA_IN;
  (* src = "parallel_to_serial/parallel_serial.v:10" *)
  output DATA_OUT;
  (* src = "parallel_to_serial/parallel_serial.v:7" *)
  input RESET;
  (* src = "parallel_to_serial/parallel_serial.v:8" *)
  input Valid;
  NAND _4_ (
    .A(Valid),
    .B(DATA_IN[7]),
    .Y(_1_)
  );
  NOT _5_ (
    .A(Valid),
    .Y(_2_)
  );
  NAND _6_ (
    .A(_2_),
    .B(DATA_OUT),
    .Y(_3_)
  );
  NAND _7_ (
    .A(_3_),
    .B(_1_),
    .Y(_0_)
  );
  DFF _8_ (
    .C(CLK),
    .D(_0_),
    .Q(DATA_OUT)
  );
endmodule

(* top =  1  *)
(* src = "pcie.v:15" *)
module pcie(reset, RESET, CONTROL, Tx_Buffer, CLK, DATA, VALID_OUT);
  (* src = "pcie.v:19" *)
  input CLK;
  (* src = "pcie.v:17" *)
  input [3:0] CONTROL;
  (* src = "pcie.v:20" *)
  output [7:0] DATA;
  (* src = "pcie.v:26" *)
  wire [7:0] OUTMUX;
  (* src = "pcie.v:39" *)
  wire [7:0] OUTSTRIPING;
  (* src = "pcie.v:16" *)
  input RESET;
  (* src = "pcie.v:18" *)
  input [7:0] Tx_Buffer;
  (* src = "pcie.v:25" *)
  wire VALID;
  (* src = "pcie.v:21" *)
  output VALID_OUT;
  (* src = "pcie.v:40" *)
  wire clk1;
  (* src = "pcie.v:41" *)
  wire clk250;
  (* src = "pcie.v:27" *)
  wire [7:0] data0;
  (* src = "pcie.v:28" *)
  wire [7:0] data1;
  (* src = "pcie.v:29" *)
  wire [7:0] data2;
  (* src = "pcie.v:30" *)
  wire [7:0] data3;
  (* src = "pcie.v:35" *)
  wire [7:0] dataserial0;
  (* src = "pcie.v:36" *)
  wire [7:0] dataserial1;
  (* src = "pcie.v:37" *)
  wire [7:0] dataserial2;
  (* src = "pcie.v:38" *)
  wire [7:0] dataserial3;
  (* src = "pcie.v:31" *)
  wire [7:0] paralelo0;
  (* src = "pcie.v:32" *)
  wire [7:0] paralelo1;
  (* src = "pcie.v:33" *)
  wire [7:0] paralelo2;
  (* src = "pcie.v:34" *)
  wire [7:0] paralelo3;
  (* src = "pcie.v:15" *)
  input reset;
  (* src = "pcie.v:74" *)
  bytestripingRX byteRX (
    .clk(clk250),
    .data(OUTSTRIPING),
    .data_in0(paralelo0),
    .data_in1(paralelo1),
    .data_in2(paralelo2),
    .data_in3(paralelo3),
    .reset(reset),
    .valid(VALID)
  );
  (* src = "pcie.v:53" *)
  bytestripingTX byteTX (
    .clk(clk250),
    .data(OUTMUX),
    .data_out0(data0),
    .data_out1(data1),
    .data_out2(data2),
    .data_out3(data3),
    .reset(reset),
    .valid(VALID)
  );
  (* src = "pcie.v:50" *)
  CLK_250hz_cond clkbyte (
    .CLK(CLK),
    .CLK_250hz(clk250),
    .RESET(RESET)
  );
  (* src = "pcie.v:44" *)
  CLK_1Mhz_cond clkmux (
    .CLK(CLK),
    .CLK_1Mhz(clk1),
    .RESET(RESET)
  );
  (* src = "pcie.v:47" *)
  mux_de_control_forzado mux (
    .CLK(clk1),
    .CONTROL(CONTROL),
    .OUT(OUTMUX),
    .Tx_Buffer(Tx_Buffer),
    .VALID(VALID)
  );
  (* src = "pcie.v:77" *)
  demux muxRX (
    .CLK(clk1),
    .DATA(DATA),
    .Rx_buffer(OUTSTRIPING),
    .VALID(VALID),
    .VALID_OUT(VALID_OUT)
  );
  (* src = "pcie.v:65" *)
  serial_parallel_cond parallel0 (
    .CLK(CLK),
    .DATA_IN(dataserial0),
    .DATA_OUT(paralelo0),
    .RESET(RESET)
  );
  (* src = "pcie.v:67" *)
  serial_parallel_cond parallel1 (
    .CLK(CLK),
    .DATA_IN(dataserial1),
    .DATA_OUT(paralelo1),
    .RESET(RESET)
  );
  (* src = "pcie.v:69" *)
  serial_parallel_cond parallel2 (
    .CLK(CLK),
    .DATA_IN(dataserial2),
    .DATA_OUT(paralelo2),
    .RESET(RESET)
  );
  (* src = "pcie.v:71" *)
  serial_parallel_cond parallel3 (
    .CLK(CLK),
    .DATA_IN(dataserial3),
    .DATA_OUT(paralelo3),
    .RESET(RESET)
  );
  (* src = "pcie.v:56" *)
  parallel_serial_cond serial0 (
    .CLK(CLK),
    .DATA_IN(data0),
    .DATA_OUT(dataserial0),
    .RESET(RESET),
    .Valid(VALID)
  );
  (* src = "pcie.v:58" *)
  parallel_serial_cond serial1 (
    .CLK(CLK),
    .DATA_IN(data1),
    .DATA_OUT(dataserial1),
    .RESET(RESET),
    .Valid(VALID)
  );
  (* src = "pcie.v:60" *)
  parallel_serial_cond serial2 (
    .CLK(CLK),
    .DATA_IN(data2),
    .DATA_OUT(dataserial2),
    .RESET(RESET),
    .Valid(VALID)
  );
  (* src = "pcie.v:62" *)
  parallel_serial_cond serial3 (
    .CLK(CLK),
    .DATA_IN(data3),
    .DATA_OUT(dataserial3),
    .RESET(RESET),
    .Valid(VALID)
  );
endmodule

(* src = "serial_to_parallel/serial_parallel.v:2" *)
module serial_parallel_cond(DATA_IN, CLK, RESET, DATA_OUT);
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [7:0] _000_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire _001_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [7:0] _002_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [6:0] _003_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [2:0] _004_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [7:0] _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  (* src = "serial_to_parallel/serial_parallel.v:6" *)
  input CLK;
  (* src = "serial_to_parallel/serial_parallel.v:5" *)
  input DATA_IN;
  (* src = "serial_to_parallel/serial_parallel.v:9" *)
  output [7:0] DATA_OUT;
  (* src = "serial_to_parallel/serial_parallel.v:18" *)
  wire [7:0] DataOut_next;
  (* src = "serial_to_parallel/serial_parallel.v:7" *)
  input RESET;
  (* src = "serial_to_parallel/serial_parallel.v:15" *)
  wire Valid;
  (* src = "serial_to_parallel/serial_parallel.v:14" *)
  wire [7:0] check;
  (* src = "serial_to_parallel/serial_parallel.v:13" *)
  wire [6:0] rBuffer;
  (* onehot = 32'd1 *)
  wire [7:0] rCurrentState;
  NOT _170_ (
    .A(RESET),
    .Y(_157_)
  );
  NOT _171_ (
    .A(Valid),
    .Y(_158_)
  );
  NAND _172_ (
    .A(check[4]),
    .B(check[3]),
    .Y(_159_)
  );
  NAND _173_ (
    .A(check[7]),
    .B(check[5]),
    .Y(_160_)
  );
  NOR _174_ (
    .A(_160_),
    .B(_159_),
    .Y(_161_)
  );
  NOT _175_ (
    .A(check[6]),
    .Y(_162_)
  );
  NOT _176_ (
    .A(check[0]),
    .Y(_163_)
  );
  NAND _177_ (
    .A(_163_),
    .B(_162_),
    .Y(_164_)
  );
  NOT _178_ (
    .A(check[1]),
    .Y(_165_)
  );
  NAND _179_ (
    .A(check[2]),
    .B(_165_),
    .Y(_166_)
  );
  NOR _180_ (
    .A(_166_),
    .B(_164_),
    .Y(_167_)
  );
  NAND _181_ (
    .A(_167_),
    .B(_161_),
    .Y(_168_)
  );
  NAND _182_ (
    .A(_168_),
    .B(_158_),
    .Y(_169_)
  );
  NAND _183_ (
    .A(_169_),
    .B(_157_),
    .Y(_006_)
  );
  NOT _184_ (
    .A(_006_),
    .Y(_001_)
  );
  NOT _185_ (
    .A(_113_),
    .Y(_007_)
  );
  NOT _186_ (
    .A(check[2]),
    .Y(_008_)
  );
  NOR _187_ (
    .A(_008_),
    .B(check[1]),
    .Y(_009_)
  );
  NAND _188_ (
    .A(_009_),
    .B(_161_),
    .Y(_010_)
  );
  NOR _189_ (
    .A(_010_),
    .B(_164_),
    .Y(_011_)
  );
  NAND _190_ (
    .A(_011_),
    .B(_158_),
    .Y(_012_)
  );
  NAND _191_ (
    .A(_012_),
    .B(_115_),
    .Y(_013_)
  );
  NOR _192_ (
    .A(_013_),
    .B(RESET),
    .Y(_014_)
  );
  NAND _193_ (
    .A(_014_),
    .B(_007_),
    .Y(_016_)
  );
  NAND _194_ (
    .A(_012_),
    .B(_113_),
    .Y(_017_)
  );
  NOR _195_ (
    .A(_017_),
    .B(_115_),
    .Y(_018_)
  );
  NOT _196_ (
    .A(_018_),
    .Y(_019_)
  );
  NAND _197_ (
    .A(_019_),
    .B(_016_),
    .Y(_021_)
  );
  NAND _198_ (
    .A(_021_),
    .B(_001_),
    .Y(_022_)
  );
  NOR _199_ (
    .A(_169_),
    .B(RESET),
    .Y(_023_)
  );
  NOT _200_ (
    .A(rCurrentState[2]),
    .Y(_024_)
  );
  NOR _201_ (
    .A(rCurrentState[6]),
    .B(rCurrentState[7]),
    .Y(_026_)
  );
  NOT _202_ (
    .A(_026_),
    .Y(_027_)
  );
  NOR _203_ (
    .A(_027_),
    .B(rCurrentState[3]),
    .Y(_028_)
  );
  NAND _204_ (
    .A(_028_),
    .B(_024_),
    .Y(_029_)
  );
  NAND _205_ (
    .A(_029_),
    .B(_023_),
    .Y(_030_)
  );
  NAND _206_ (
    .A(_030_),
    .B(_022_),
    .Y(_004_[1])
  );
  NAND _207_ (
    .A(_023_),
    .B(rCurrentState[2]),
    .Y(_031_)
  );
  NOT _208_ (
    .A(_118_),
    .Y(_032_)
  );
  NOR _209_ (
    .A(_168_),
    .B(Valid),
    .Y(_033_)
  );
  NOR _210_ (
    .A(_033_),
    .B(_032_),
    .Y(_034_)
  );
  NOR _211_ (
    .A(_034_),
    .B(_006_),
    .Y(_036_)
  );
  NAND _212_ (
    .A(_036_),
    .B(_018_),
    .Y(_037_)
  );
  NAND _213_ (
    .A(_037_),
    .B(_031_),
    .Y(_155_)
  );
  NOT _214_ (
    .A(_115_),
    .Y(_038_)
  );
  NOR _215_ (
    .A(_033_),
    .B(_038_),
    .Y(_039_)
  );
  NAND _216_ (
    .A(_039_),
    .B(_157_),
    .Y(_040_)
  );
  NOR _217_ (
    .A(_040_),
    .B(_007_),
    .Y(_042_)
  );
  NAND _218_ (
    .A(_042_),
    .B(_036_),
    .Y(_043_)
  );
  NAND _219_ (
    .A(_023_),
    .B(rCurrentState[1]),
    .Y(_044_)
  );
  NAND _220_ (
    .A(_044_),
    .B(_043_),
    .Y(_156_)
  );
  NOR _221_ (
    .A(_040_),
    .B(_113_),
    .Y(_045_)
  );
  NOR _222_ (
    .A(_018_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _223_ (
    .A(_046_),
    .B(_006_),
    .Y(_047_)
  );
  NAND _224_ (
    .A(_034_),
    .B(_047_),
    .Y(_048_)
  );
  NOT _225_ (
    .A(_023_),
    .Y(_049_)
  );
  NOT _226_ (
    .A(rCurrentState[5]),
    .Y(_050_)
  );
  NOR _227_ (
    .A(rCurrentState[1]),
    .B(rCurrentState[3]),
    .Y(_051_)
  );
  NAND _228_ (
    .A(_051_),
    .B(_050_),
    .Y(_052_)
  );
  NOR _229_ (
    .A(_052_),
    .B(rCurrentState[7]),
    .Y(_053_)
  );
  NOR _230_ (
    .A(_053_),
    .B(_049_),
    .Y(_054_)
  );
  NOR _231_ (
    .A(_033_),
    .B(_007_),
    .Y(_055_)
  );
  NOR _232_ (
    .A(_055_),
    .B(_006_),
    .Y(_056_)
  );
  NAND _233_ (
    .A(_034_),
    .B(_157_),
    .Y(_057_)
  );
  NOR _234_ (
    .A(_057_),
    .B(_039_),
    .Y(_058_)
  );
  NAND _235_ (
    .A(_058_),
    .B(_056_),
    .Y(_059_)
  );
  NAND _236_ (
    .A(_059_),
    .B(_043_),
    .Y(_060_)
  );
  NOR _237_ (
    .A(_060_),
    .B(_054_),
    .Y(_061_)
  );
  NAND _238_ (
    .A(_061_),
    .B(_048_),
    .Y(_004_[2])
  );
  NAND _239_ (
    .A(_026_),
    .B(_050_),
    .Y(_062_)
  );
  NAND _240_ (
    .A(_062_),
    .B(_023_),
    .Y(_063_)
  );
  NAND _241_ (
    .A(_023_),
    .B(rCurrentState[4]),
    .Y(_064_)
  );
  NOT _242_ (
    .A(_064_),
    .Y(_065_)
  );
  NOR _243_ (
    .A(_065_),
    .B(_056_),
    .Y(_066_)
  );
  NAND _244_ (
    .A(_066_),
    .B(_063_),
    .Y(_004_[0])
  );
  NAND _245_ (
    .A(_023_),
    .B(rCurrentState[7]),
    .Y(_067_)
  );
  NAND _246_ (
    .A(_012_),
    .B(_118_),
    .Y(_068_)
  );
  NOR _247_ (
    .A(_068_),
    .B(_006_),
    .Y(_069_)
  );
  NAND _248_ (
    .A(_069_),
    .B(_045_),
    .Y(_070_)
  );
  NAND _249_ (
    .A(_070_),
    .B(_067_),
    .Y(_015_)
  );
  NAND _250_ (
    .A(_036_),
    .B(_045_),
    .Y(_071_)
  );
  NAND _251_ (
    .A(_023_),
    .B(rCurrentState[6]),
    .Y(_072_)
  );
  NAND _252_ (
    .A(_072_),
    .B(_071_),
    .Y(_020_)
  );
  NAND _253_ (
    .A(_023_),
    .B(rCurrentState[5]),
    .Y(_073_)
  );
  NAND _254_ (
    .A(_073_),
    .B(_059_),
    .Y(_025_)
  );
  NOR _255_ (
    .A(_068_),
    .B(RESET),
    .Y(_074_)
  );
  NOR _256_ (
    .A(_074_),
    .B(_014_),
    .Y(_075_)
  );
  NAND _257_ (
    .A(_075_),
    .B(_056_),
    .Y(_076_)
  );
  NAND _258_ (
    .A(_076_),
    .B(_064_),
    .Y(_035_)
  );
  NAND _259_ (
    .A(_023_),
    .B(rCurrentState[3]),
    .Y(_077_)
  );
  NAND _260_ (
    .A(_069_),
    .B(_018_),
    .Y(_078_)
  );
  NAND _261_ (
    .A(_078_),
    .B(_077_),
    .Y(_041_)
  );
  NOT _262_ (
    .A(_078_),
    .Y(_079_)
  );
  NAND _263_ (
    .A(_079_),
    .B(DATA_IN),
    .Y(_080_)
  );
  NAND _264_ (
    .A(_078_),
    .B(rBuffer[1]),
    .Y(_081_)
  );
  NAND _265_ (
    .A(_081_),
    .B(_080_),
    .Y(_003_[1])
  );
  NOT _266_ (
    .A(_069_),
    .Y(_082_)
  );
  NOR _267_ (
    .A(_082_),
    .B(_016_),
    .Y(_083_)
  );
  NAND _268_ (
    .A(_083_),
    .B(DATA_IN),
    .Y(_084_)
  );
  NAND _269_ (
    .A(_070_),
    .B(rBuffer[0]),
    .Y(_085_)
  );
  NAND _270_ (
    .A(_085_),
    .B(_084_),
    .Y(_003_[0])
  );
  NOT _271_ (
    .A(_056_),
    .Y(_086_)
  );
  NAND _272_ (
    .A(_074_),
    .B(_013_),
    .Y(_087_)
  );
  NOR _273_ (
    .A(_087_),
    .B(_086_),
    .Y(_088_)
  );
  NAND _274_ (
    .A(_088_),
    .B(DATA_IN),
    .Y(_089_)
  );
  NAND _275_ (
    .A(_059_),
    .B(rBuffer[2]),
    .Y(_090_)
  );
  NAND _276_ (
    .A(_090_),
    .B(_089_),
    .Y(_003_[2])
  );
  NOT _277_ (
    .A(_036_),
    .Y(_091_)
  );
  NAND _278_ (
    .A(_014_),
    .B(_113_),
    .Y(_092_)
  );
  NOR _279_ (
    .A(_092_),
    .B(_091_),
    .Y(_093_)
  );
  NAND _280_ (
    .A(_093_),
    .B(DATA_IN),
    .Y(_094_)
  );
  NAND _281_ (
    .A(_043_),
    .B(rBuffer[3]),
    .Y(_095_)
  );
  NAND _282_ (
    .A(_095_),
    .B(_094_),
    .Y(_003_[3])
  );
  NOR _283_ (
    .A(_091_),
    .B(_016_),
    .Y(_096_)
  );
  NAND _284_ (
    .A(_096_),
    .B(DATA_IN),
    .Y(_097_)
  );
  NAND _285_ (
    .A(_071_),
    .B(rBuffer[4]),
    .Y(_098_)
  );
  NAND _286_ (
    .A(_098_),
    .B(_097_),
    .Y(_003_[4])
  );
  NOT _287_ (
    .A(_037_),
    .Y(_099_)
  );
  NAND _288_ (
    .A(_099_),
    .B(DATA_IN),
    .Y(_100_)
  );
  NAND _289_ (
    .A(_037_),
    .B(rBuffer[5]),
    .Y(_101_)
  );
  NAND _290_ (
    .A(_101_),
    .B(_100_),
    .Y(_003_[5])
  );
  NAND _291_ (
    .A(_057_),
    .B(_040_),
    .Y(_102_)
  );
  NOR _292_ (
    .A(_102_),
    .B(_086_),
    .Y(_103_)
  );
  NAND _293_ (
    .A(_103_),
    .B(DATA_IN),
    .Y(_104_)
  );
  NAND _294_ (
    .A(_076_),
    .B(rBuffer[6]),
    .Y(_105_)
  );
  NAND _295_ (
    .A(_105_),
    .B(_104_),
    .Y(_003_[6])
  );
  NOT _296_ (
    .A(DATA_OUT[0]),
    .Y(_106_)
  );
  NOR _297_ (
    .A(_033_),
    .B(_106_),
    .Y(DataOut_next[0])
  );
  NOT _298_ (
    .A(DATA_OUT[1]),
    .Y(_107_)
  );
  NOR _299_ (
    .A(_033_),
    .B(_107_),
    .Y(DataOut_next[1])
  );
  NOT _300_ (
    .A(DATA_OUT[2]),
    .Y(_108_)
  );
  NAND _301_ (
    .A(_012_),
    .B(_108_),
    .Y(DataOut_next[2])
  );
  NOT _302_ (
    .A(DATA_OUT[3]),
    .Y(_109_)
  );
  NAND _303_ (
    .A(_012_),
    .B(_109_),
    .Y(DataOut_next[3])
  );
  NOT _304_ (
    .A(DATA_OUT[4]),
    .Y(_110_)
  );
  NAND _305_ (
    .A(_012_),
    .B(_110_),
    .Y(DataOut_next[4])
  );
  NOT _306_ (
    .A(DATA_OUT[5]),
    .Y(_111_)
  );
  NAND _307_ (
    .A(_012_),
    .B(_111_),
    .Y(DataOut_next[5])
  );
  NOT _308_ (
    .A(DATA_OUT[6]),
    .Y(_112_)
  );
  NOR _309_ (
    .A(_033_),
    .B(_112_),
    .Y(DataOut_next[6])
  );
  NOT _310_ (
    .A(DATA_OUT[7]),
    .Y(_114_)
  );
  NAND _311_ (
    .A(_012_),
    .B(_114_),
    .Y(DataOut_next[7])
  );
  NOR _312_ (
    .A(_082_),
    .B(_092_),
    .Y(_116_)
  );
  NAND _313_ (
    .A(_116_),
    .B(DATA_IN),
    .Y(_117_)
  );
  NAND _314_ (
    .A(_069_),
    .B(_042_),
    .Y(_119_)
  );
  NAND _315_ (
    .A(_119_),
    .B(DataOut_next[0]),
    .Y(_120_)
  );
  NAND _316_ (
    .A(_120_),
    .B(_117_),
    .Y(_005_[0])
  );
  NAND _317_ (
    .A(_116_),
    .B(rBuffer[0]),
    .Y(_121_)
  );
  NAND _318_ (
    .A(_119_),
    .B(DataOut_next[1]),
    .Y(_122_)
  );
  NAND _319_ (
    .A(_122_),
    .B(_121_),
    .Y(_005_[1])
  );
  NOR _320_ (
    .A(_116_),
    .B(DataOut_next[2]),
    .Y(_123_)
  );
  NOR _321_ (
    .A(_119_),
    .B(rBuffer[1]),
    .Y(_124_)
  );
  NOR _322_ (
    .A(_124_),
    .B(_123_),
    .Y(_005_[2])
  );
  NOR _323_ (
    .A(_116_),
    .B(DataOut_next[3]),
    .Y(_125_)
  );
  NOR _324_ (
    .A(_119_),
    .B(rBuffer[2]),
    .Y(_126_)
  );
  NOR _325_ (
    .A(_126_),
    .B(_125_),
    .Y(_005_[3])
  );
  NOR _326_ (
    .A(_116_),
    .B(DataOut_next[4]),
    .Y(_127_)
  );
  NOR _327_ (
    .A(_119_),
    .B(rBuffer[3]),
    .Y(_128_)
  );
  NOR _328_ (
    .A(_128_),
    .B(_127_),
    .Y(_005_[4])
  );
  NOR _329_ (
    .A(_116_),
    .B(DataOut_next[5]),
    .Y(_129_)
  );
  NOR _330_ (
    .A(_032_),
    .B(rBuffer[4]),
    .Y(_130_)
  );
  NAND _331_ (
    .A(_130_),
    .B(Valid),
    .Y(_131_)
  );
  NOR _332_ (
    .A(_131_),
    .B(_092_),
    .Y(_132_)
  );
  NOR _333_ (
    .A(_132_),
    .B(_129_),
    .Y(_005_[5])
  );
  NAND _334_ (
    .A(_116_),
    .B(rBuffer[5]),
    .Y(_133_)
  );
  NAND _335_ (
    .A(_119_),
    .B(DataOut_next[6]),
    .Y(_134_)
  );
  NAND _336_ (
    .A(_134_),
    .B(_133_),
    .Y(_005_[6])
  );
  NAND _337_ (
    .A(_116_),
    .B(rBuffer[6]),
    .Y(_135_)
  );
  NAND _338_ (
    .A(_119_),
    .B(DataOut_next[7]),
    .Y(_136_)
  );
  NAND _339_ (
    .A(_136_),
    .B(_135_),
    .Y(_005_[7])
  );
  NAND _340_ (
    .A(_001_),
    .B(check[0]),
    .Y(_137_)
  );
  NAND _341_ (
    .A(_023_),
    .B(DATA_IN),
    .Y(_138_)
  );
  NAND _342_ (
    .A(_138_),
    .B(_137_),
    .Y(_002_[0])
  );
  NAND _343_ (
    .A(_001_),
    .B(check[1]),
    .Y(_139_)
  );
  NAND _344_ (
    .A(_023_),
    .B(check[0]),
    .Y(_140_)
  );
  NAND _345_ (
    .A(_140_),
    .B(_139_),
    .Y(_002_[1])
  );
  NAND _346_ (
    .A(_001_),
    .B(check[2]),
    .Y(_141_)
  );
  NAND _347_ (
    .A(_023_),
    .B(check[1]),
    .Y(_142_)
  );
  NAND _348_ (
    .A(_142_),
    .B(_141_),
    .Y(_002_[2])
  );
  NAND _349_ (
    .A(_001_),
    .B(check[3]),
    .Y(_143_)
  );
  NAND _350_ (
    .A(_023_),
    .B(check[2]),
    .Y(_144_)
  );
  NAND _351_ (
    .A(_144_),
    .B(_143_),
    .Y(_002_[3])
  );
  NAND _352_ (
    .A(_001_),
    .B(check[4]),
    .Y(_145_)
  );
  NAND _353_ (
    .A(_023_),
    .B(check[3]),
    .Y(_146_)
  );
  NAND _354_ (
    .A(_146_),
    .B(_145_),
    .Y(_002_[4])
  );
  NAND _355_ (
    .A(_001_),
    .B(check[5]),
    .Y(_147_)
  );
  NAND _356_ (
    .A(_023_),
    .B(check[4]),
    .Y(_148_)
  );
  NAND _357_ (
    .A(_148_),
    .B(_147_),
    .Y(_002_[5])
  );
  NAND _358_ (
    .A(_001_),
    .B(check[6]),
    .Y(_149_)
  );
  NAND _359_ (
    .A(_023_),
    .B(check[5]),
    .Y(_150_)
  );
  NAND _360_ (
    .A(_150_),
    .B(_149_),
    .Y(_002_[6])
  );
  NAND _361_ (
    .A(_001_),
    .B(check[7]),
    .Y(_151_)
  );
  NAND _362_ (
    .A(_023_),
    .B(check[6]),
    .Y(_152_)
  );
  NAND _363_ (
    .A(_152_),
    .B(_151_),
    .Y(_002_[7])
  );
  NOR _364_ (
    .A(_012_),
    .B(RESET),
    .Y(_153_)
  );
  NOR _365_ (
    .A(_153_),
    .B(_106_),
    .Y(_000_[0])
  );
  NOR _366_ (
    .A(_153_),
    .B(_107_),
    .Y(_000_[1])
  );
  NOT _367_ (
    .A(_153_),
    .Y(_154_)
  );
  NAND _368_ (
    .A(_154_),
    .B(_108_),
    .Y(_000_[2])
  );
  NAND _369_ (
    .A(_154_),
    .B(_109_),
    .Y(_000_[3])
  );
  NAND _370_ (
    .A(_154_),
    .B(_110_),
    .Y(_000_[4])
  );
  NAND _371_ (
    .A(_154_),
    .B(_111_),
    .Y(_000_[5])
  );
  NOR _372_ (
    .A(_153_),
    .B(_112_),
    .Y(_000_[6])
  );
  NAND _373_ (
    .A(_154_),
    .B(_114_),
    .Y(_000_[7])
  );
  DFF _374_ (
    .C(CLK),
    .D(_156_),
    .Q(rCurrentState[1])
  );
  DFF _375_ (
    .C(CLK),
    .D(_155_),
    .Q(rCurrentState[2])
  );
  DFF _376_ (
    .C(CLK),
    .D(_041_),
    .Q(rCurrentState[3])
  );
  DFF _377_ (
    .C(CLK),
    .D(_035_),
    .Q(rCurrentState[4])
  );
  DFF _378_ (
    .C(CLK),
    .D(_025_),
    .Q(rCurrentState[5])
  );
  DFF _379_ (
    .C(CLK),
    .D(_020_),
    .Q(rCurrentState[6])
  );
  DFF _380_ (
    .C(CLK),
    .D(_015_),
    .Q(rCurrentState[7])
  );
  DFF _381_ (
    .C(CLK),
    .D(_001_),
    .Q(Valid)
  );
  DFF _382_ (
    .C(CLK),
    .D(_000_[0]),
    .Q(DATA_OUT[0])
  );
  DFF _383_ (
    .C(CLK),
    .D(_000_[1]),
    .Q(DATA_OUT[1])
  );
  DFF _384_ (
    .C(CLK),
    .D(_000_[2]),
    .Q(DATA_OUT[2])
  );
  DFF _385_ (
    .C(CLK),
    .D(_000_[3]),
    .Q(DATA_OUT[3])
  );
  DFF _386_ (
    .C(CLK),
    .D(_000_[4]),
    .Q(DATA_OUT[4])
  );
  DFF _387_ (
    .C(CLK),
    .D(_000_[5]),
    .Q(DATA_OUT[5])
  );
  DFF _388_ (
    .C(CLK),
    .D(_000_[6]),
    .Q(DATA_OUT[6])
  );
  DFF _389_ (
    .C(CLK),
    .D(_000_[7]),
    .Q(DATA_OUT[7])
  );
  DFF _390_ (
    .C(CLK),
    .D(_004_[0]),
    .Q(_113_)
  );
  DFF _391_ (
    .C(CLK),
    .D(_004_[1]),
    .Q(_115_)
  );
  DFF _392_ (
    .C(CLK),
    .D(_004_[2]),
    .Q(_118_)
  );
  DFF _393_ (
    .C(CLK),
    .D(_003_[0]),
    .Q(rBuffer[0])
  );
  DFF _394_ (
    .C(CLK),
    .D(_003_[1]),
    .Q(rBuffer[1])
  );
  DFF _395_ (
    .C(CLK),
    .D(_003_[2]),
    .Q(rBuffer[2])
  );
  DFF _396_ (
    .C(CLK),
    .D(_003_[3]),
    .Q(rBuffer[3])
  );
  DFF _397_ (
    .C(CLK),
    .D(_003_[4]),
    .Q(rBuffer[4])
  );
  DFF _398_ (
    .C(CLK),
    .D(_003_[5]),
    .Q(rBuffer[5])
  );
  DFF _399_ (
    .C(CLK),
    .D(_003_[6]),
    .Q(rBuffer[6])
  );
  DFF _400_ (
    .C(CLK),
    .D(_002_[0]),
    .Q(check[0])
  );
  DFF _401_ (
    .C(CLK),
    .D(_002_[1]),
    .Q(check[1])
  );
  DFF _402_ (
    .C(CLK),
    .D(_002_[2]),
    .Q(check[2])
  );
  DFF _403_ (
    .C(CLK),
    .D(_002_[3]),
    .Q(check[3])
  );
  DFF _404_ (
    .C(CLK),
    .D(_002_[4]),
    .Q(check[4])
  );
  DFF _405_ (
    .C(CLK),
    .D(_002_[5]),
    .Q(check[5])
  );
  DFF _406_ (
    .C(CLK),
    .D(_002_[6]),
    .Q(check[6])
  );
  DFF _407_ (
    .C(CLK),
    .D(_002_[7]),
    .Q(check[7])
  );
  DFF _408_ (
    .C(CLK),
    .D(_005_[0]),
    .Q(DataOut_next[0])
  );
  DFF _409_ (
    .C(CLK),
    .D(_005_[1]),
    .Q(DataOut_next[1])
  );
  DFF _410_ (
    .C(CLK),
    .D(_005_[2]),
    .Q(DataOut_next[2])
  );
  DFF _411_ (
    .C(CLK),
    .D(_005_[3]),
    .Q(DataOut_next[3])
  );
  DFF _412_ (
    .C(CLK),
    .D(_005_[4]),
    .Q(DataOut_next[4])
  );
  DFF _413_ (
    .C(CLK),
    .D(_005_[5]),
    .Q(DataOut_next[5])
  );
  DFF _414_ (
    .C(CLK),
    .D(_005_[6]),
    .Q(DataOut_next[6])
  );
  DFF _415_ (
    .C(CLK),
    .D(_005_[7]),
    .Q(DataOut_next[7])
  );
endmodule
