/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 4.8.4-2ubuntu1~14.04.3 -O2 -fstack-protector -fPIC -Os) */

(* src = "clk_1Mhz/clk_1Mhz.v:1" *)
module CLK_1Mhz_cond(CLK, RESET, CLK_1Mhz);
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  wire _00_;
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  wire [1:0] _01_;
  (* src = "clk_1Mhz/clk_1Mhz.v:30" *)
  wire [31:0] _02_;
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "clk_1Mhz/clk_1Mhz.v:4" *)
  input CLK;
  (* src = "clk_1Mhz/clk_1Mhz.v:7" *)
  output CLK_1Mhz;
  reg CLK_1Mhz;
  (* src = "clk_1Mhz/clk_1Mhz.v:5" *)
  input RESET;
  (* src = "clk_1Mhz/clk_1Mhz.v:10" *)
  reg [1:0] counter;
  assign _04_ = _02_[0] |(* src = "clk_1Mhz/clk_1Mhz.v:21" *)  counter[1];
  assign _05_ = _02_[0] |(* src = "clk_1Mhz/clk_1Mhz.v:25" *)  _03_[1];
  assign _00_ = RESET ? (* src = "clk_1Mhz/clk_1Mhz.v:14" *) 1'b0 : _07_;
  assign _01_[0] = RESET ? (* src = "clk_1Mhz/clk_1Mhz.v:14" *) 1'b0 : _02_[0];
  assign _01_[1] = RESET ? (* src = "clk_1Mhz/clk_1Mhz.v:14" *) 1'b0 : _02_[1];
  assign _06_ = _05_ ? (* src = "clk_1Mhz/clk_1Mhz.v:25" *) CLK_1Mhz : 1'b0;
  assign _07_ = _04_ ? (* src = "clk_1Mhz/clk_1Mhz.v:21" *) _06_ : 1'b1;
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  always @(posedge CLK)
      counter[0] <= _01_[0];
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  always @(posedge CLK)
      counter[1] <= _01_[1];
  (* src = "clk_1Mhz/clk_1Mhz.v:12" *)
  always @(posedge CLK)
      CLK_1Mhz <= _00_;
  assign _02_[0] = counter[0] ^(* src = "clk_1Mhz/clk_1Mhz.v:25" *)  1'b1;
  assign _03_[1] = counter[1] ^(* src = "clk_1Mhz/clk_1Mhz.v:25" *)  1'b1;
  assign _02_[1] = counter[1] ^(* src = "<techmap.v>:263" *)  counter[0];
endmodule

(* src = "clk_250hz/clk_250hz.v:1" *)
module CLK_250hz_cond(CLK, RESET, CLK_250hz);
  (* src = "clk_250hz/clk_250hz.v:12" *)
  wire _00_;
  (* src = "clk_250hz/clk_250hz.v:12" *)
  wire [4:0] _01_;
  (* src = "clk_250hz/clk_250hz.v:21" *)
  wire [31:0] _02_;
  wire [1:0] _03_;
  wire _04_;
  wire [1:0] _05_;
  wire _06_;
  wire [4:0] _07_;
  wire [4:0] _08_;
  wire _09_;
  wire _10_;
  wire [4:0] _11_;
  wire [4:0] _12_;
  wire _13_;
  wire _14_;
  (* src = "<techmap.v>:260|<techmap.v>:203" *)
  wire [31:0] _15_;
  (* src = "<techmap.v>:260|<techmap.v>:222" *)
  wire _16_;
  (* src = "clk_250hz/clk_250hz.v:4" *)
  input CLK;
  (* src = "clk_250hz/clk_250hz.v:7" *)
  output CLK_250hz;
  reg CLK_250hz;
  (* src = "clk_250hz/clk_250hz.v:5" *)
  input RESET;
  (* src = "clk_250hz/clk_250hz.v:10" *)
  reg [4:0] counter;
  assign _03_[1] = _07_[2] |(* src = "clk_250hz/clk_250hz.v:22" *)  counter[3];
  assign _04_ = _03_[0] |(* src = "clk_250hz/clk_250hz.v:22" *)  _03_[1];
  assign _09_ = _04_ |(* src = "clk_250hz/clk_250hz.v:22" *)  counter[4];
  assign _03_[0] = _02_[0] |(* src = "clk_250hz/clk_250hz.v:26" *)  _07_[1];
  assign _05_[1] = _07_[2] |(* src = "clk_250hz/clk_250hz.v:26" *)  _08_[3];
  assign _06_ = _03_[0] |(* src = "clk_250hz/clk_250hz.v:26" *)  _05_[1];
  assign _10_ = _06_ |(* src = "clk_250hz/clk_250hz.v:26" *)  counter[4];
  assign _11_[0] = _10_ ? (* src = "clk_250hz/clk_250hz.v:26" *) _02_[0] : 1'b0;
  assign _11_[1] = _10_ ? (* src = "clk_250hz/clk_250hz.v:26" *) _02_[1] : 1'b0;
  assign _11_[2] = _10_ ? (* src = "clk_250hz/clk_250hz.v:26" *) _02_[2] : 1'b0;
  assign _11_[3] = _10_ ? (* src = "clk_250hz/clk_250hz.v:26" *) _02_[3] : 1'b0;
  assign _11_[4] = _10_ ? (* src = "clk_250hz/clk_250hz.v:26" *) _02_[4] : 1'b0;
  assign _01_[0] = RESET ? (* src = "clk_250hz/clk_250hz.v:14" *) 1'b0 : _12_[0];
  assign _01_[1] = RESET ? (* src = "clk_250hz/clk_250hz.v:14" *) 1'b0 : _12_[1];
  assign _01_[2] = RESET ? (* src = "clk_250hz/clk_250hz.v:14" *) 1'b0 : _12_[2];
  assign _01_[3] = RESET ? (* src = "clk_250hz/clk_250hz.v:14" *) 1'b0 : _12_[3];
  assign _01_[4] = RESET ? (* src = "clk_250hz/clk_250hz.v:14" *) 1'b0 : _12_[4];
  assign _12_[0] = _09_ ? (* src = "clk_250hz/clk_250hz.v:22" *) _11_[0] : _02_[0];
  assign _12_[1] = _09_ ? (* src = "clk_250hz/clk_250hz.v:22" *) _11_[1] : _02_[1];
  assign _12_[2] = _09_ ? (* src = "clk_250hz/clk_250hz.v:22" *) _11_[2] : _02_[2];
  assign _12_[3] = _09_ ? (* src = "clk_250hz/clk_250hz.v:22" *) _11_[3] : _02_[3];
  assign _12_[4] = _09_ ? (* src = "clk_250hz/clk_250hz.v:22" *) _11_[4] : _02_[4];
  assign _13_ = _10_ ? (* src = "clk_250hz/clk_250hz.v:26" *) CLK_250hz : 1'b0;
  assign _14_ = _09_ ? (* src = "clk_250hz/clk_250hz.v:22" *) _13_ : 1'b1;
  assign _00_ = RESET ? (* src = "clk_250hz/clk_250hz.v:14" *) 1'b0 : _14_;
  (* src = "clk_250hz/clk_250hz.v:12" *)
  always @(posedge CLK)
      CLK_250hz <= _00_;
  (* src = "clk_250hz/clk_250hz.v:12" *)
  always @(posedge CLK)
      counter[0] <= _01_[0];
  (* src = "clk_250hz/clk_250hz.v:12" *)
  always @(posedge CLK)
      counter[1] <= _01_[1];
  (* src = "clk_250hz/clk_250hz.v:12" *)
  always @(posedge CLK)
      counter[2] <= _01_[2];
  (* src = "clk_250hz/clk_250hz.v:12" *)
  always @(posedge CLK)
      counter[3] <= _01_[3];
  (* src = "clk_250hz/clk_250hz.v:12" *)
  always @(posedge CLK)
      counter[4] <= _01_[4];
  assign _02_[0] = counter[0] ^(* src = "clk_250hz/clk_250hz.v:26" *)  1'b1;
  assign _07_[1] = counter[1] ^(* src = "clk_250hz/clk_250hz.v:26" *)  1'b1;
  assign _07_[2] = counter[2] ^(* src = "clk_250hz/clk_250hz.v:26" *)  1'b1;
  assign _08_[3] = counter[3] ^(* src = "clk_250hz/clk_250hz.v:26" *)  1'b1;
  assign _02_[1] = counter[1] ^(* src = "<techmap.v>:263" *)  counter[0];
  assign _02_[2] = counter[2] ^(* src = "<techmap.v>:263" *)  _15_[1];
  assign _02_[3] = counter[3] ^(* src = "<techmap.v>:263" *)  _15_[2];
  assign _02_[4] = counter[4] ^(* src = "<techmap.v>:263" *)  _15_[3];
  assign _15_[2] = counter[2] &(* src = "<techmap.v>:260|<techmap.v>:229" *)  _15_[1];
  assign _16_ = counter[3] &(* src = "<techmap.v>:260|<techmap.v>:222" *)  counter[2];
  assign _15_[3] = _16_ &(* src = "<techmap.v>:260|<techmap.v>:221" *)  _15_[1];
  assign _15_[1] = counter[1] &(* src = "<techmap.v>:260|<techmap.v>:221" *)  counter[0];
endmodule

(* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
module bytestripingRX(clk, reset, valid, data, data_in0, data_in1, data_in2, data_in3);
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
  input clk;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:3" *)
  output [7:0] data;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in0;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in1;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in2;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:4" *)
  input [7:0] data_in3;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
  input reset;
  (* src = "Byte_Striping/Rx/byte_stripingRx.v:2" *)
  input valid;
  assign data = 8'b00000000;
endmodule

(* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
module bytestripingTX(clk, reset, valid, data, data_out0, data_out1, data_out2, data_out3);
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
  input clk;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:3" *)
  input [7:0] data;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out0;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out1;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out2;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:4" *)
  output [7:0] data_out3;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
  input reset;
  (* src = "Byte_Striping/Tx/byte_stripingTx.v:2" *)
  input valid;
  assign data_out0 = 8'b00000000;
  assign data_out1 = 8'b00000000;
  assign data_out2 = 8'b00000000;
  assign data_out3 = 8'b00000000;
endmodule

(* src = "demux/demux.v:3" *)
module demux(Rx_buffer, CLK, VALID, VALID_OUT, DATA);
  (* src = "demux/demux.v:9" *)
  wire [7:0] _00_;
  (* src = "demux/demux.v:9" *)
  wire _01_;
  wire [3:0] _02_;
  wire [1:0] _03_;
  wire [3:0] _04_;
  wire [1:0] _05_;
  wire [3:0] _06_;
  wire [1:0] _07_;
  wire [1:0] _08_;
  wire [3:0] _09_;
  wire [1:0] _10_;
  wire [7:0] _11_;
  wire [7:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "demux/demux.v:13" *)
  wire _18_;
  (* src = "demux/demux.v:13" *)
  wire _19_;
  (* src = "demux/demux.v:13" *)
  wire _20_;
  (* src = "demux/demux.v:13" *)
  wire _21_;
  (* src = "demux/demux.v:13" *)
  wire _22_;
  (* src = "demux/demux.v:13" *)
  wire _23_;
  (* src = "demux/demux.v:13" *)
  wire _24_;
  (* src = "demux/demux.v:13" *)
  wire _25_;
  (* src = "demux/demux.v:13" *)
  wire _26_;
  wire [7:0] _27_;
  wire _28_;
  (* src = "demux/demux.v:4" *)
  input CLK;
  (* src = "demux/demux.v:7" *)
  output [7:0] DATA;
  reg [7:0] DATA;
  (* src = "demux/demux.v:3" *)
  input [7:0] Rx_buffer;
  (* src = "demux/demux.v:5" *)
  input VALID;
  (* src = "demux/demux.v:6" *)
  output VALID_OUT;
  reg VALID_OUT;
  assign _02_[0] = _11_[0] |(* src = "demux/demux.v:13" *)  _11_[1];
  assign _02_[1] = Rx_buffer[2] |(* src = "demux/demux.v:13" *)  _11_[3];
  assign _03_[0] = _02_[0] |(* src = "demux/demux.v:13" *)  _02_[1];
  assign _13_ = _03_[0] |(* src = "demux/demux.v:13" *)  _03_[1];
  assign _04_[2] = _11_[4] |(* src = "demux/demux.v:13" *)  Rx_buffer[5];
  assign _05_[0] = _04_[0] |(* src = "demux/demux.v:13" *)  _04_[1];
  assign _05_[1] = _04_[2] |(* src = "demux/demux.v:13" *)  _04_[3];
  assign _14_ = _05_[0] |(* src = "demux/demux.v:13" *)  _05_[1];
  assign _06_[0] = _11_[0] |(* src = "demux/demux.v:13" *)  Rx_buffer[1];
  assign _02_[3] = _11_[6] |(* src = "demux/demux.v:13" *)  _11_[7];
  assign _07_[0] = _06_[0] |(* src = "demux/demux.v:13" *)  _04_[1];
  assign _03_[1] = _02_[2] |(* src = "demux/demux.v:13" *)  _02_[3];
  assign _15_ = _07_[0] |(* src = "demux/demux.v:13" *)  _03_[1];
  assign _04_[0] = Rx_buffer[0] |(* src = "demux/demux.v:13" *)  Rx_buffer[1];
  assign _04_[1] = _12_[2] |(* src = "demux/demux.v:13" *)  _11_[3];
  assign _02_[2] = _11_[4] |(* src = "demux/demux.v:13" *)  _11_[5];
  assign _04_[3] = _11_[6] |(* src = "demux/demux.v:13" *)  Rx_buffer[7];
  assign _08_[1] = _02_[2] |(* src = "demux/demux.v:13" *)  _04_[3];
  assign _16_ = _05_[0] |(* src = "demux/demux.v:13" *)  _08_[1];
  assign _09_[1] = _12_[2] |(* src = "demux/demux.v:13" *)  Rx_buffer[3];
  assign _10_[0] = _02_[0] |(* src = "demux/demux.v:13" *)  _09_[1];
  assign _17_ = _10_[0] |(* src = "demux/demux.v:13" *)  _03_[1];
  assign _20_ = ~(* src = "demux/demux.v:13" *) _13_;
  assign _21_ = ~(* src = "demux/demux.v:13" *) _14_;
  assign _22_ = ~(* src = "demux/demux.v:13" *) _15_;
  assign _18_ = ~(* src = "demux/demux.v:13" *) _16_;
  assign _19_ = ~(* src = "demux/demux.v:13" *) _17_;
  assign _25_ = _20_ |(* src = "demux/demux.v:13" *)  _21_;
  assign _26_ = _25_ |(* src = "demux/demux.v:13" *)  _22_;
  assign _23_ = _26_ |(* src = "demux/demux.v:13" *)  _18_;
  assign _24_ = _23_ |(* src = "demux/demux.v:13" *)  _19_;
  assign _27_[0] = _24_ ? (* src = "demux/demux.v:13" *) DATA[0] : Rx_buffer[0];
  assign _27_[1] = _24_ ? (* src = "demux/demux.v:13" *) DATA[1] : Rx_buffer[1];
  assign _27_[2] = _24_ ? (* src = "demux/demux.v:13" *) DATA[2] : Rx_buffer[2];
  assign _27_[3] = _24_ ? (* src = "demux/demux.v:13" *) DATA[3] : Rx_buffer[3];
  assign _27_[4] = _24_ ? (* src = "demux/demux.v:13" *) DATA[4] : Rx_buffer[4];
  assign _27_[5] = _24_ ? (* src = "demux/demux.v:13" *) DATA[5] : Rx_buffer[5];
  assign _27_[6] = _24_ ? (* src = "demux/demux.v:13" *) DATA[6] : Rx_buffer[6];
  assign _27_[7] = _24_ ? (* src = "demux/demux.v:13" *) DATA[7] : Rx_buffer[7];
  assign _00_[0] = VALID ? (* src = "demux/demux.v:11" *) _27_[0] : DATA[0];
  assign _00_[1] = VALID ? (* src = "demux/demux.v:11" *) _27_[1] : DATA[1];
  assign _00_[2] = VALID ? (* src = "demux/demux.v:11" *) _27_[2] : DATA[2];
  assign _00_[3] = VALID ? (* src = "demux/demux.v:11" *) _27_[3] : DATA[3];
  assign _00_[4] = VALID ? (* src = "demux/demux.v:11" *) _27_[4] : DATA[4];
  assign _00_[5] = VALID ? (* src = "demux/demux.v:11" *) _27_[5] : DATA[5];
  assign _00_[6] = VALID ? (* src = "demux/demux.v:11" *) _27_[6] : DATA[6];
  assign _00_[7] = VALID ? (* src = "demux/demux.v:11" *) _27_[7] : DATA[7];
  assign _28_ = ~(* src = "demux/demux.v:13" *) _24_;
  assign _01_ = VALID ? (* src = "demux/demux.v:11" *) _28_ : VALID_OUT;
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[0] <= _00_[0];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[1] <= _00_[1];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[2] <= _00_[2];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[3] <= _00_[3];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[4] <= _00_[4];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[5] <= _00_[5];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[6] <= _00_[6];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      DATA[7] <= _00_[7];
  (* src = "demux/demux.v:9" *)
  always @(posedge CLK)
      VALID_OUT <= _01_;
  assign _11_[3] = Rx_buffer[3] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _11_[0] = Rx_buffer[0] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _11_[1] = Rx_buffer[1] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _12_[2] = Rx_buffer[2] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _11_[4] = Rx_buffer[4] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _11_[5] = Rx_buffer[5] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _11_[6] = Rx_buffer[6] ^(* src = "demux/demux.v:13" *)  1'b1;
  assign _11_[7] = Rx_buffer[7] ^(* src = "demux/demux.v:13" *)  1'b1;
endmodule

(* src = "mux_de_control_forzado/mux_de_control_forzado.v:3" *)
module mux_de_control_forzado(CONTROL, VALID, Tx_Buffer, CLK, OUT);
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  wire [7:0] _000_;
  wire [1:0] _001_;
  wire [1:0] _002_;
  wire [1:0] _003_;
  wire [1:0] _004_;
  wire [1:0] _005_;
  wire [4:0] _006_;
  wire [1:0] _007_;
  wire _008_;
  wire [4:0] _009_;
  wire [1:0] _010_;
  wire _011_;
  wire [4:0] _012_;
  wire [1:0] _013_;
  wire _014_;
  wire [4:0] _015_;
  wire [1:0] _016_;
  wire _017_;
  wire [4:0] _018_;
  wire [1:0] _019_;
  wire _020_;
  wire [4:0] _021_;
  wire [1:0] _022_;
  wire _023_;
  wire [4:0] _024_;
  wire [1:0] _025_;
  wire _026_;
  wire [4:0] _027_;
  wire [1:0] _028_;
  wire _029_;
  wire [4:0] _030_;
  wire [1:0] _031_;
  wire _032_;
  wire _033_;
  wire [3:0] _034_;
  wire [3:0] _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:432" *)
  wire [79:0] _045_;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:428" *)
  wire [7:0] _046_;
  wire _047_;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *)
  wire _048_;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:6" *)
  input CLK;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:3" *)
  input [3:0] CONTROL;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:7" *)
  output [7:0] OUT;
  reg [7:0] OUT;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:5" *)
  input [7:0] Tx_Buffer;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:4" *)
  output VALID;
  assign _001_[1] = CONTROL[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _034_[3];
  assign _036_ = _001_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _001_[1];
  assign _037_ = _002_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _002_[1];
  assign _038_ = _003_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _002_[1];
  assign _039_ = _004_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _002_[1];
  assign _002_[1] = _035_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  CONTROL[3];
  assign _040_ = _001_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _002_[1];
  assign _002_[0] = _035_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _035_[1];
  assign _041_ = _002_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _005_[1];
  assign _003_[0] = CONTROL[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _035_[1];
  assign _042_ = _003_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _005_[1];
  assign _004_[0] = _035_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  CONTROL[1];
  assign _043_ = _004_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _005_[1];
  assign _006_[0] = _047_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *)  _045_[14];
  assign _007_[0] = _006_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *)  _006_[1];
  assign _008_ = _007_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *)  _007_[1];
  assign _048_ = _008_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *)  _006_[4];
  assign _010_[0] = _009_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[1];
  assign _011_ = _010_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[3];
  assign _046_[1] = _011_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[4];
  assign _014_ = _012_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _013_[1];
  assign _046_[0] = _014_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[4];
  assign _015_[0] = _045_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _045_[14];
  assign _006_[1] = _045_[21] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[1];
  assign _016_[0] = _015_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[1];
  assign _016_[1] = _006_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _015_[3];
  assign _017_ = _016_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _016_[1];
  assign _046_[2] = _017_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[4];
  assign _018_[0] = _045_[3] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _045_[14];
  assign _006_[3] = _009_[3] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _015_[3];
  assign _019_[0] = _018_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[1];
  assign _007_[1] = _006_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[3];
  assign _020_ = _019_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _007_[1];
  assign _046_[3] = _020_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _018_[4];
  assign _021_[0] = _045_[4] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _045_[14];
  assign _006_[2] = _012_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _045_[46];
  assign _022_[0] = _021_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[1];
  assign _023_ = _022_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _007_[1];
  assign _046_[4] = _023_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[4];
  assign _024_[0] = _045_[5] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _045_[14];
  assign _006_[4] = _009_[4] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _018_[4];
  assign _025_[0] = _024_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[1];
  assign _026_ = _025_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _013_[1];
  assign _046_[5] = _026_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[4];
  assign _028_[0] = _027_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[1];
  assign _013_[1] = _012_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[3];
  assign _029_ = _028_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _013_[1];
  assign _046_[7] = _029_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _006_[4];
  assign _030_[0] = _045_[6] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _045_[14];
  assign _031_[0] = _030_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[1];
  assign _031_[1] = _006_[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[3];
  assign _032_ = _031_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _031_[1];
  assign _046_[6] = _032_ |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:441" *)  _009_[4];
  assign _044_ = _004_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _001_[1];
  assign _001_[0] = CONTROL[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  CONTROL[1];
  assign _005_[1] = CONTROL[2] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  CONTROL[3];
  assign _033_ = _001_[0] |(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  _005_[1];
  assign _045_[14] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _036_;
  assign _045_[21] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _037_;
  assign _009_[1] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _038_;
  assign _012_[2] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _039_;
  assign _045_[46] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _040_;
  assign _009_[3] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _041_;
  assign _015_[3] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _042_;
  assign _009_[4] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _043_;
  assign _018_[4] = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _033_;
  assign _047_ = ~(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *) _044_;
  assign _000_[0] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[0] : 1'b0;
  assign _000_[1] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[1] : 1'b0;
  assign _000_[2] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[2] : 1'b0;
  assign _000_[3] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[3] : 1'b0;
  assign _000_[4] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[4] : 1'b0;
  assign _000_[5] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[5] : 1'b0;
  assign _000_[6] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[6] : 1'b0;
  assign _000_[7] = _048_ ? (* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:445" *) _046_[7] : 1'b0;
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[0] <= _000_[0];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[1] <= _000_[1];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[2] <= _000_[2];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[3] <= _000_[3];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[4] <= _000_[4];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[5] <= _000_[5];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[6] <= _000_[6];
  (* src = "mux_de_control_forzado/mux_de_control_forzado.v:9" *)
  always @(posedge CLK)
      OUT[7] <= _000_[7];
  assign _034_[3] = CONTROL[3] ^(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  1'b1;
  assign _035_[2] = CONTROL[2] ^(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  1'b1;
  assign _035_[1] = CONTROL[1] ^(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  1'b1;
  assign _035_[0] = CONTROL[0] ^(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11" *)  1'b1;
  assign _012_[0] = Tx_Buffer[0] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _009_[0] = Tx_Buffer[1] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _045_[2] = Tx_Buffer[2] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _045_[3] = Tx_Buffer[3] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _045_[4] = Tx_Buffer[4] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _045_[5] = Tx_Buffer[5] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _045_[6] = Tx_Buffer[6] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign _027_[0] = Tx_Buffer[7] &(* src = "mux_de_control_forzado/mux_de_control_forzado.v:11|<techmap.v>:434" *)  _047_;
  assign VALID = 1'b1;
endmodule

(* src = "parallel_to_serial/parallel_serial.v:2" *)
module parallel_serial_cond(DATA_IN, CLK, RESET, Valid, DATA_OUT);
  (* src = "parallel_to_serial/parallel_serial.v:24" *)
  wire _0_;
  (* src = "parallel_to_serial/parallel_serial.v:6" *)
  input CLK;
  (* src = "parallel_to_serial/parallel_serial.v:5" *)
  input [7:0] DATA_IN;
  (* src = "parallel_to_serial/parallel_serial.v:10" *)
  output DATA_OUT;
  reg DATA_OUT;
  (* src = "parallel_to_serial/parallel_serial.v:7" *)
  input RESET;
  (* src = "parallel_to_serial/parallel_serial.v:8" *)
  input Valid;
  assign _0_ = Valid ? (* src = "parallel_to_serial/parallel_serial.v:26" *) DATA_IN[7] : DATA_OUT;
  (* src = "parallel_to_serial/parallel_serial.v:24" *)
  always @(posedge CLK)
      DATA_OUT <= _0_;
endmodule

(* top =  1  *)
(* src = "pcie.v:15" *)
module pcie(reset, RESET, CONTROL, Tx_Buffer, CLK, DATA, VALID_OUT);
  (* src = "pcie.v:19" *)
  input CLK;
  (* src = "pcie.v:17" *)
  input [3:0] CONTROL;
  (* src = "pcie.v:20" *)
  output [7:0] DATA;
  (* src = "pcie.v:26" *)
  wire [7:0] OUTMUX;
  (* src = "pcie.v:39" *)
  wire [7:0] OUTSTRIPING;
  (* src = "pcie.v:16" *)
  input RESET;
  (* src = "pcie.v:18" *)
  input [7:0] Tx_Buffer;
  (* src = "pcie.v:25" *)
  wire VALID;
  (* src = "pcie.v:21" *)
  output VALID_OUT;
  (* src = "pcie.v:40" *)
  wire clk1;
  (* src = "pcie.v:41" *)
  wire clk250;
  (* src = "pcie.v:27" *)
  wire [7:0] data0;
  (* src = "pcie.v:28" *)
  wire [7:0] data1;
  (* src = "pcie.v:29" *)
  wire [7:0] data2;
  (* src = "pcie.v:30" *)
  wire [7:0] data3;
  (* src = "pcie.v:35" *)
  wire [7:0] dataserial0;
  (* src = "pcie.v:36" *)
  wire [7:0] dataserial1;
  (* src = "pcie.v:37" *)
  wire [7:0] dataserial2;
  (* src = "pcie.v:38" *)
  wire [7:0] dataserial3;
  (* src = "pcie.v:31" *)
  wire [7:0] paralelo0;
  (* src = "pcie.v:32" *)
  wire [7:0] paralelo1;
  (* src = "pcie.v:33" *)
  wire [7:0] paralelo2;
  (* src = "pcie.v:34" *)
  wire [7:0] paralelo3;
  (* src = "pcie.v:15" *)
  input reset;
  (* src = "pcie.v:74" *)
  bytestripingRX byteRX (
    .clk(clk250),
    .data(OUTSTRIPING),
    .data_in0(paralelo0),
    .data_in1(paralelo1),
    .data_in2(paralelo2),
    .data_in3(paralelo3),
    .reset(reset),
    .valid(VALID)
  );
  (* src = "pcie.v:53" *)
  bytestripingTX byteTX (
    .clk(clk250),
    .data(OUTMUX),
    .data_out0(data0),
    .data_out1(data1),
    .data_out2(data2),
    .data_out3(data3),
    .reset(reset),
    .valid(VALID)
  );
  (* src = "pcie.v:50" *)
  CLK_250hz_cond clkbyte (
    .CLK(CLK),
    .CLK_250hz(clk250),
    .RESET(RESET)
  );
  (* src = "pcie.v:44" *)
  CLK_1Mhz_cond clkmux (
    .CLK(CLK),
    .CLK_1Mhz(clk1),
    .RESET(RESET)
  );
  (* src = "pcie.v:47" *)
  mux_de_control_forzado mux (
    .CLK(clk1),
    .CONTROL(CONTROL),
    .OUT(OUTMUX),
    .Tx_Buffer(Tx_Buffer),
    .VALID(VALID)
  );
  (* src = "pcie.v:77" *)
  demux muxRX (
    .CLK(clk1),
    .DATA(DATA),
    .Rx_buffer(OUTSTRIPING),
    .VALID(VALID),
    .VALID_OUT(VALID_OUT)
  );
  (* src = "pcie.v:65" *)
  serial_parallel_cond parallel0 (
    .CLK(CLK),
    .DATA_IN(dataserial0),
    .DATA_OUT(paralelo0),
    .RESET(RESET)
  );
  (* src = "pcie.v:67" *)
  serial_parallel_cond parallel1 (
    .CLK(CLK),
    .DATA_IN(dataserial1),
    .DATA_OUT(paralelo1),
    .RESET(RESET)
  );
  (* src = "pcie.v:69" *)
  serial_parallel_cond parallel2 (
    .CLK(CLK),
    .DATA_IN(dataserial2),
    .DATA_OUT(paralelo2),
    .RESET(RESET)
  );
  (* src = "pcie.v:71" *)
  serial_parallel_cond parallel3 (
    .CLK(CLK),
    .DATA_IN(dataserial3),
    .DATA_OUT(paralelo3),
    .RESET(RESET)
  );
  (* src = "pcie.v:56" *)
  parallel_serial_cond serial0 (
    .CLK(CLK),
    .DATA_IN(data0),
    .DATA_OUT(dataserial0),
    .RESET(RESET),
    .Valid(VALID)
  );
  (* src = "pcie.v:58" *)
  parallel_serial_cond serial1 (
    .CLK(CLK),
    .DATA_IN(data1),
    .DATA_OUT(dataserial1),
    .RESET(RESET),
    .Valid(VALID)
  );
  (* src = "pcie.v:60" *)
  parallel_serial_cond serial2 (
    .CLK(CLK),
    .DATA_IN(data2),
    .DATA_OUT(dataserial2),
    .RESET(RESET),
    .Valid(VALID)
  );
  (* src = "pcie.v:62" *)
  parallel_serial_cond serial3 (
    .CLK(CLK),
    .DATA_IN(data3),
    .DATA_OUT(dataserial3),
    .RESET(RESET),
    .Valid(VALID)
  );
endmodule

(* src = "serial_to_parallel/serial_parallel.v:2" *)
module serial_parallel_cond(DATA_IN, CLK, RESET, DATA_OUT);
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [7:0] _000_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire _001_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [7:0] _002_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [6:0] _003_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [2:0] _004_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [7:0] _005_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  wire [2:0] _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire [7:0] _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire [3:0] _040_;
  wire [1:0] _041_;
  wire [2:0] _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire [2:0] _047_;
  wire _048_;
  wire [1:0] _049_;
  wire [4:0] _050_;
  wire [2:0] _051_;
  wire _052_;
  wire [1:0] _053_;
  wire [2:0] _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire [1:0] _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire [7:0] _069_;
  wire [2:0] _070_;
  wire [2:0] _071_;
  wire [2:0] _072_;
  wire [2:0] _073_;
  wire [2:0] _074_;
  wire [2:0] _075_;
  wire [10:0] _076_;
  wire [2:0] _077_;
  wire [2:0] _078_;
  wire [2:0] _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  (* src = "serial_to_parallel/serial_parallel.v:12" *)
  reg [2:0] _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire [7:0] _111_;
  wire [7:0] _112_;
  wire [7:0] _113_;
  wire [2:0] _114_;
  (* src = "serial_to_parallel/serial_parallel.v:6" *)
  input CLK;
  (* src = "serial_to_parallel/serial_parallel.v:5" *)
  input DATA_IN;
  (* src = "serial_to_parallel/serial_parallel.v:9" *)
  output [7:0] DATA_OUT;
  reg [7:0] DATA_OUT;
  (* src = "serial_to_parallel/serial_parallel.v:18" *)
  reg [7:0] DataOut_next;
  (* src = "serial_to_parallel/serial_parallel.v:7" *)
  input RESET;
  (* src = "serial_to_parallel/serial_parallel.v:19" *)
  wire Start;
  (* src = "serial_to_parallel/serial_parallel.v:15" *)
  reg Valid;
  (* src = "serial_to_parallel/serial_parallel.v:17" *)
  wire Valid_neg;
  (* src = "serial_to_parallel/serial_parallel.v:16" *)
  wire Valid_next;
  (* src = "serial_to_parallel/serial_parallel.v:14" *)
  reg [7:0] check;
  (* src = "serial_to_parallel/serial_parallel.v:13" *)
  reg [6:0] rBuffer;
  (* onehot = 32'd1 *)
  wire [7:0] rCurrentState;
  assign _040_[0] = check[0] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  check[1];
  assign _040_[1] = _069_[2] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  _069_[3];
  assign _040_[2] = _069_[4] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  _069_[5];
  assign _040_[3] = check[6] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  _069_[7];
  assign _041_[0] = _040_[0] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  _040_[1];
  assign _041_[1] = _040_[2] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  _040_[3];
  assign _080_ = _041_[0] |(* src = "serial_to_parallel/serial_parallel.v:25" *)  _041_[1];
  assign _042_[1] = _026_ | _027_;
  assign _042_[2] = _034_ | _035_;
  assign _043_ = _042_[0] | _042_[1];
  assign _004_[1] = _043_ | _042_[2];
  assign _081_ = _044_ | _070_[2];
  assign _082_ = _044_ | _071_[2];
  assign _045_ = _012_ | _013_;
  assign _030_[2] = _045_ | _034_;
  assign _083_ = _044_ | _072_[2];
  assign _046_ = _010_ | _011_;
  assign _030_[1] = _046_ | _033_;
  assign _047_[0] = _037_ | _039_;
  assign _047_[1] = _028_ | _029_;
  assign _047_[2] = _033_ | _035_;
  assign _048_ = _047_[0] | _047_[1];
  assign _004_[2] = _048_ | _047_[2];
  assign _084_ = _044_ | _073_[2];
  assign _085_ = _044_ | _074_[2];
  assign _086_ = _044_ | _075_[2];
  assign _049_[0] = rCurrentState[7] | rCurrentState[5];
  assign _049_[1] = rCurrentState[3] | rCurrentState[1];
  assign _009_ = _049_[0] | _049_[1];
  assign _050_[1] = Start | _076_[3];
  assign _051_[0] = _044_ | _050_[1];
  assign _051_[1] = _050_[2] | _050_[3];
  assign _051_[2] = _050_[4] | _076_[10];
  assign _052_ = _051_[0] | _051_[1];
  assign _087_ = _052_ | _051_[2];
  assign _053_[1] = rCurrentState[3] | rCurrentState[2];
  assign _008_ = _053_[0] | _053_[1];
  assign _054_[0] = _036_ | _037_;
  assign _042_[0] = _038_ | _039_;
  assign _054_[2] = _024_ | _025_;
  assign _055_ = _054_[0] | _042_[0];
  assign _004_[0] = _055_ | _054_[2];
  assign _088_ = _044_ | _077_[2];
  assign _089_ = _057_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _078_[2];
  assign _090_ = _058_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _078_[2];
  assign _053_[0] = rCurrentState[7] | rCurrentState[6];
  assign _059_[1] = rCurrentState[5] | rCurrentState[4];
  assign _007_ = _053_[0] | _059_[1];
  assign _091_ = _060_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _078_[2];
  assign _092_ = _061_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _006_[2];
  assign _057_ = _006_[0] |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _078_[1];
  assign _093_ = _057_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _006_[2];
  assign _058_ = _079_[0] |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _006_[1];
  assign _094_ = _058_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _006_[2];
  assign _061_ = _079_[0] |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _078_[1];
  assign _095_ = _061_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _078_[2];
  assign _062_ = _022_ | _023_;
  assign _030_[7] = _062_ | _039_;
  assign _063_ = _021_ | _038_;
  assign _030_[6] = _063_ | _020_;
  assign _064_ = _018_ | _019_;
  assign _030_[5] = _064_ | _037_;
  assign _050_[2] = _076_[4] | _076_[5];
  assign _050_[3] = _076_[6] | _076_[7];
  assign _050_[4] = _076_[8] | _076_[9];
  assign _065_ = _016_ | _017_;
  assign _030_[4] = _065_ | _036_;
  assign _044_ = RESET | _070_[1];
  assign _066_ = _015_ | _014_;
  assign _030_[3] = _066_ | _035_;
  assign _060_ = _006_[0] |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _006_[1];
  assign _067_ = _060_ |(* src = "serial_to_parallel/serial_parallel.v:70" *)  _006_[2];
  assign _056_ = RESET | Valid_next;
  assign _068_ = _056_ | Start;
  assign _034_ = ~_081_;
  assign _038_ = ~_082_;
  assign _033_ = ~_083_;
  assign _037_ = ~_084_;
  assign _039_ = ~_085_;
  assign _035_ = ~_086_;
  assign _032_ = ~_087_;
  assign _036_ = ~_088_;
  assign _076_[4] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _089_;
  assign _076_[3] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _090_;
  assign _076_[5] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _091_;
  assign _076_[6] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _092_;
  assign _076_[7] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _093_;
  assign _076_[8] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _094_;
  assign _076_[9] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _067_;
  assign _076_[10] = ~(* src = "serial_to_parallel/serial_parallel.v:70" *) _095_;
  assign _031_ = ~_068_;
  assign Start = Valid_neg &(* src = "serial_to_parallel/serial_parallel.v:45" *)  Valid_next;
  assign _097_ = _090_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[1] : DATA_IN;
  assign _098_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _097_ : rBuffer[1];
  assign _003_[1] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[1] : _098_;
  assign _099_ = _089_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[0] : DATA_IN;
  assign _100_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _099_ : rBuffer[0];
  assign _003_[0] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[0] : _100_;
  assign _101_ = _091_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[2] : DATA_IN;
  assign _102_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _101_ : rBuffer[2];
  assign _003_[2] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[2] : _102_;
  assign _103_ = _092_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[3] : DATA_IN;
  assign _104_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _103_ : rBuffer[3];
  assign _003_[3] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[3] : _104_;
  assign _105_ = _093_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[4] : DATA_IN;
  assign _106_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _105_ : rBuffer[4];
  assign _003_[4] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[4] : _106_;
  assign _107_ = _094_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[5] : DATA_IN;
  assign _108_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _107_ : rBuffer[5];
  assign _003_[5] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[5] : _108_;
  assign _109_ = _067_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) rBuffer[6] : DATA_IN;
  assign _110_ = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _109_ : rBuffer[6];
  assign _003_[6] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) rBuffer[6] : _110_;
  assign _111_[0] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[0] : DATA_IN;
  assign _111_[1] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[1] : rBuffer[0];
  assign _111_[2] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[2] : rBuffer[1];
  assign _111_[3] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[3] : rBuffer[2];
  assign _111_[4] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[4] : rBuffer[3];
  assign _111_[5] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[5] : rBuffer[4];
  assign _111_[6] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[6] : rBuffer[5];
  assign _111_[7] = _095_ ? (* src = "serial_to_parallel/serial_parallel.v:70" *) DataOut_next[7] : rBuffer[6];
  assign _112_[0] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[0] : DataOut_next[0];
  assign _112_[1] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[1] : DataOut_next[1];
  assign _112_[2] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[2] : DataOut_next[2];
  assign _112_[3] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[3] : DataOut_next[3];
  assign _112_[4] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[4] : DataOut_next[4];
  assign _112_[5] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[5] : DataOut_next[5];
  assign _112_[6] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[6] : DataOut_next[6];
  assign _112_[7] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) _111_[7] : DataOut_next[7];
  assign _005_[0] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[0] : _112_[0];
  assign _005_[1] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[1] : _112_[1];
  assign _005_[2] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[2] : _112_[2];
  assign _005_[3] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[3] : _112_[3];
  assign _005_[4] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[4] : _112_[4];
  assign _005_[5] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[5] : _112_[5];
  assign _005_[6] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[6] : _112_[6];
  assign _005_[7] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DataOut_next[7] : _112_[7];
  assign _113_[0] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[0] : DATA_IN;
  assign _113_[1] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[1] : check[0];
  assign _113_[2] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[2] : check[1];
  assign _113_[3] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[3] : check[2];
  assign _113_[4] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[4] : check[3];
  assign _113_[5] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[5] : check[4];
  assign _113_[6] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[6] : check[5];
  assign _113_[7] = Valid_next ? (* src = "serial_to_parallel/serial_parallel.v:64" *) check[7] : check[6];
  assign _002_[0] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[0];
  assign _002_[1] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[1];
  assign _002_[2] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[2];
  assign _002_[3] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[3];
  assign _002_[4] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[4];
  assign _002_[5] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[5];
  assign _002_[6] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[6];
  assign _002_[7] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : _113_[7];
  assign _114_[0] = Start ? (* src = "serial_to_parallel/serial_parallel.v:58" *) 1'b0 : _096_[0];
  assign _114_[1] = Start ? (* src = "serial_to_parallel/serial_parallel.v:58" *) 1'b0 : _096_[1];
  assign _114_[2] = Start ? (* src = "serial_to_parallel/serial_parallel.v:58" *) 1'b0 : _096_[2];
  assign _006_[0] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'bx : _114_[0];
  assign _006_[1] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'bx : _114_[1];
  assign _006_[2] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'bx : _114_[2];
  assign _000_[0] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[0] : DataOut_next[0];
  assign _000_[1] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[1] : DataOut_next[1];
  assign _000_[2] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[2] : DataOut_next[2];
  assign _000_[3] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[3] : DataOut_next[3];
  assign _000_[4] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[4] : DataOut_next[4];
  assign _000_[5] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[5] : DataOut_next[5];
  assign _000_[6] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[6] : DataOut_next[6];
  assign _000_[7] = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) DATA_OUT[7] : DataOut_next[7];
  assign _001_ = RESET ? (* src = "serial_to_parallel/serial_parallel.v:50" *) 1'b0 : Valid_next;
  assign DataOut_next[0] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b0 : DATA_OUT[0];
  assign DataOut_next[1] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b0 : DATA_OUT[1];
  assign DataOut_next[2] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b1 : DATA_OUT[2];
  assign DataOut_next[3] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b1 : DATA_OUT[3];
  assign DataOut_next[4] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b1 : DATA_OUT[4];
  assign DataOut_next[5] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b1 : DATA_OUT[5];
  assign DataOut_next[6] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b0 : DATA_OUT[6];
  assign DataOut_next[7] = Start ? (* src = "serial_to_parallel/serial_parallel.v:35" *) 1'b1 : DATA_OUT[7];
  assign Valid_next = _080_ ? (* src = "serial_to_parallel/serial_parallel.v:25" *) Valid : 1'b1;
  assign Valid_neg = ~(* src = "serial_to_parallel/serial_parallel.v:44" *) Valid;
  reg \rCurrentState_reg[1] ;
  always @(posedge CLK)
      \rCurrentState_reg[1]  <= _030_[1];
  assign rCurrentState[1] = \rCurrentState_reg[1] ;
  reg \rCurrentState_reg[2] ;
  always @(posedge CLK)
      \rCurrentState_reg[2]  <= _030_[2];
  assign rCurrentState[2] = \rCurrentState_reg[2] ;
  reg \rCurrentState_reg[3] ;
  always @(posedge CLK)
      \rCurrentState_reg[3]  <= _030_[3];
  assign rCurrentState[3] = \rCurrentState_reg[3] ;
  reg \rCurrentState_reg[4] ;
  always @(posedge CLK)
      \rCurrentState_reg[4]  <= _030_[4];
  assign rCurrentState[4] = \rCurrentState_reg[4] ;
  reg \rCurrentState_reg[5] ;
  always @(posedge CLK)
      \rCurrentState_reg[5]  <= _030_[5];
  assign rCurrentState[5] = \rCurrentState_reg[5] ;
  reg \rCurrentState_reg[6] ;
  always @(posedge CLK)
      \rCurrentState_reg[6]  <= _030_[6];
  assign rCurrentState[6] = \rCurrentState_reg[6] ;
  reg \rCurrentState_reg[7] ;
  always @(posedge CLK)
      \rCurrentState_reg[7]  <= _030_[7];
  assign rCurrentState[7] = \rCurrentState_reg[7] ;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      Valid <= _001_;
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[0] <= _000_[0];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[1] <= _000_[1];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[2] <= _000_[2];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[3] <= _000_[3];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[4] <= _000_[4];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[5] <= _000_[5];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[6] <= _000_[6];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DATA_OUT[7] <= _000_[7];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      _096_[0] <= _004_[0];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      _096_[1] <= _004_[1];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      _096_[2] <= _004_[2];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[0] <= _003_[0];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[1] <= _003_[1];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[2] <= _003_[2];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[3] <= _003_[3];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[4] <= _003_[4];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[5] <= _003_[5];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      rBuffer[6] <= _003_[6];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[0] <= _002_[0];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[1] <= _002_[1];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[2] <= _002_[2];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[3] <= _002_[3];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[4] <= _002_[4];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[5] <= _002_[5];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[6] <= _002_[6];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      check[7] <= _002_[7];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[0] <= _005_[0];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[1] <= _005_[1];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[2] <= _005_[2];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[3] <= _005_[3];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[4] <= _005_[4];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[5] <= _005_[5];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[6] <= _005_[6];
  (* src = "serial_to_parallel/serial_parallel.v:48" *)
  always @(posedge CLK)
      DataOut_next[7] <= _005_[7];
  assign _020_ = _031_ & rCurrentState[6];
  assign _069_[2] = check[2] ^(* src = "serial_to_parallel/serial_parallel.v:25" *)  1'b1;
  assign _069_[3] = check[3] ^(* src = "serial_to_parallel/serial_parallel.v:25" *)  1'b1;
  assign _069_[4] = check[4] ^(* src = "serial_to_parallel/serial_parallel.v:25" *)  1'b1;
  assign _069_[5] = check[5] ^(* src = "serial_to_parallel/serial_parallel.v:25" *)  1'b1;
  assign _069_[7] = check[7] ^(* src = "serial_to_parallel/serial_parallel.v:25" *)  1'b1;
  assign _070_[2] = _076_[8] ^ 1'b1;
  assign _071_[2] = _076_[7] ^ 1'b1;
  assign _023_ = _032_ & rCurrentState[7];
  assign _013_ = _032_ & rCurrentState[2];
  assign _012_ = _031_ & rCurrentState[2];
  assign _072_[2] = _076_[6] ^ 1'b1;
  assign _073_[2] = _076_[5] ^ 1'b1;
  assign _074_[2] = _076_[4] ^ 1'b1;
  assign _011_ = _032_ & rCurrentState[1];
  assign _075_[2] = _076_[3] ^ 1'b1;
  assign _029_ = _032_ & _009_;
  assign _028_ = _031_ & _009_;
  assign _027_ = _032_ & _008_;
  assign _026_ = _031_ & _008_;
  assign _077_[2] = _076_[9] ^ 1'b1;
  assign _025_ = _032_ & _007_;
  assign _024_ = _031_ & _007_;
  assign _079_[0] = _006_[0] ^(* src = "serial_to_parallel/serial_parallel.v:70" *)  1'b1;
  assign _078_[1] = _006_[1] ^(* src = "serial_to_parallel/serial_parallel.v:70" *)  1'b1;
  assign _078_[2] = _006_[2] ^(* src = "serial_to_parallel/serial_parallel.v:70" *)  1'b1;
  assign _022_ = _031_ & rCurrentState[7];
  assign _021_ = _032_ & rCurrentState[6];
  assign _019_ = _032_ & rCurrentState[5];
  assign _010_ = _031_ & rCurrentState[1];
  assign _018_ = _031_ & rCurrentState[5];
  assign _070_[1] = Valid_next ^ 1'b1;
  assign _017_ = _032_ & rCurrentState[4];
  assign _016_ = _031_ & rCurrentState[4];
  assign _015_ = _032_ & rCurrentState[3];
  assign _014_ = _031_ & rCurrentState[3];
endmodule
