/*
Suma de matrices

Justificación:
Este algorimto se escogío principalmente por su estructura la cual es altamente paralelisable por lo que se podrá aumentar aun más la efectividad de este. 
Se puede llegar a paralelisar al sumar cada cuadrante de la matriz al mismo tiempo con la otra matriz.

Aplicaciones:
La suma de matrices es algo indispensable en la programación ya que la mayoría de programas necesitan manipular información y almacenarla. La manera más optima para hacerlo es en un arreglo de matrices. Para poder manipular esta información se necesita tener una función de suma de matrices.
Además en la computación gráfica, las matrices son ampliamente usadas para lograr la visualización de colores. Por ejemplo el más basico que seria el RGB, son 3 matrices de NxM, estos siendo las dimensiones de la pantalla, con la información de cuanto rojo, verde y azul debe de mostrar en cada pixel


Explicación:
El algoritmo usa 2 funciones, waitFor la cual es un timer para simular un retraso. Por lo que si uno pone waitFor(5) este va a esperar 5 segundos.
La segunda funcion matrixsum es la principal del programa la cual suma las matrices. 
Esta recibe varias entradas, el tamaño de las matrices, los 2 datos de las matrices, y las posiciones donde esta leyendolos.
Tambien recibe el ENB el cual se activa despues de haber pasado 5 segundos para que empiece a sumar. El cual se activa despues del waitFor.


Algoritmo:
*/
#include <stdio.h>
#include <time.h>

int main(){
    int row, col, i, j;
    int ENB;

    int a[5][5] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
    int b[5][5] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};

    col = 5;
    row = 5;

    waitFor(5);
    ENB = 1;

    for (i=0; i<row; ++i){
        for (j=0; j<col; ++j){
            int val_a = a[i][j];
            int val_b = b[i][j];
            matrixsum(col,row,val_a,val_b,i,j,ENB);
        }
    }
}

//Time delay
int waitFor (unsigned int secs) {
    unsigned int retTime = time(0) + secs;   // Get finishing time.
    while (time(0) < retTime);               // Loop until it arrives.
    return 0;
}

int matrixsum(int c, int r,int a, int b, int i, int j, int ENB){  

    if(ENB > 0){
        int sum[5][5];
        
        //Suma ambos terminos
        sum[i][j]=a+b;

        // Displaying the result
        if(i==4 & j==4){
            printf("\nSum of two matrix is: \n\n");

            for(i=0;i<r;++i)
                for(j=0;j<c;++j)

                {
                    printf("%d   ",sum[i][j]);
                    if(j==c-1)
                    {
                        printf("\n\n");
                    }
                }
            return 0;
        }
    }
}
/*